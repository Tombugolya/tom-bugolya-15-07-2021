{"version":3,"sources":["store/reducers/themeReducer.ts","api/AccuWeatherAPI.ts","store/reducers/weatherReducer.ts","apiTest.ts","store/reducers/rootReducer.ts","store/StoreProvider.tsx","hooks/hooks.tsx","style/ThemeProvider.tsx","components/ThemeSwitch.tsx","components/Links.tsx","components/Navbar.tsx","components/Search.tsx","components/ResultsDisplay.tsx","components/WeatherSummary.tsx","components/AddToFavoritesWidget.tsx","components/FiveDayForecastWidget.tsx","components/WeatherDisplay.tsx","components/MainDisplay.tsx","pages/Home.tsx","components/FavoritesGrid.tsx","pages/Favorites.tsx","pages/Routes.tsx","components/Content.tsx","pages/Main.tsx","index.tsx"],"names":["ThemeActionCode","initialState","dark","window","matchMedia","matches","Prefix","theme","state","action","type","TOGGLE","WeatherActionCode","process","method","query","queryParams","URLSearchParams","apikey","this","q","toString","response","fetch","AUTOCOMPLETE","to","error","data","console","log","json","key","CURRENT_CONDITIONS","FIVE_DAY_FORECAST","latitude","longitude","GEOPOSITION","GET_INFO_BY_KEY","id","Promise","all","getCurrentConditions","getLocationInfoByKey","getFiveDayForecast","callback","getCombinedData","then","TestObject","conditions","WeatherText","WeatherIcon","Temperature","Metric","Value","Imperial","info","Key","LocalizedName","Country","ID","AdministrativeArea","fiveDayForecast","DailyForecasts","EpochDate","Minimum","Unit","Maximum","Day","Icon","Night","celsius","favorites","current","searchResults","weather","ADD_FAVORITE","payload","REMOVE_FAVORITE","filter","CHANGE_CURRENT","ADD_RESULTS","results","RETURN","rootReducer","combineReducers","store","createStore","StoreProvider","children","useAppDispatch","useDispatch","useAppSelector","useSelector","ThemeProvider","darkMode","darkThemeEnabled","createTheme","palette","primary","main","contrastText","secondary","CssBaseline","Box","maxWidth","minHeight","bgcolor","ThemeSwitch","dispatch","Button","style","margin","onClick","size","Links","display","alignItems","width","justifyContent","color","Link","minWidth","component","RouterLink","Hidden","smDown","memo","Navbar","Typography","variant","marginLeft","fontStyle","Search","textFieldRef","useRef","TextField","fullWidth","inputRef","value","AccuWeatherAPI","getAutocompleteSearch","values","ResultsDisplay","useTheme","largeScreenBreakpoint","useMediaQuery","breakpoints","up","Grid","container","direction","spacing","map","index","textAlign","item","xs","lg","Card","CardActionArea","selected","getCombinedDataCallback","onCardSelected","CardContent","WeatherSummary","temperature","src","getImageUrl","alt","ColorButton","withStyles","root","red","AddToFavoritesWidget","isFavorited","includes","FiveDayForecastWidget","forecast","getTemperatureRange","min","max","unit","Math","round","epochTime","Date","getDay","WeatherDisplay","mediumScreenBreakpoint","flexDirection","fontSize","MainDisplay","length","Home","useState","mount","setMount","useAsyncEffect","a","FavoritesGrid","combinedDataArray","history","useHistory","combinedData","push","onCardClick","Favorites","setCombinedData","Routes","path","exact","Content","Main","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01bf4b25.chunk.js","sourcesContent":["import { AnyAction, Reducer } from 'redux';\n\ninterface ThemeState {\n  dark: boolean;\n}\n\nexport enum ThemeActionCode {\n  TOGGLE = 'TOGGLE_DARK_THEME',\n}\n\ninterface ThemeAction extends AnyAction {\n  type: ThemeActionCode;\n}\n\nconst initialState: ThemeState = {\n  dark: isBrowserDarkMode(),\n};\n\nfunction isBrowserDarkMode(): boolean {\n  if (window.matchMedia)\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\n  return false;\n}\n\nconst theme: Reducer<ThemeState, ThemeAction> = (\n  state: ThemeState = initialState,\n  action: ThemeAction\n) => {\n  switch (action.type) {\n    case ThemeActionCode.TOGGLE:\n      return { ...state, dark: !state.dark };\n    default:\n      return state;\n  }\n};\n\nexport default theme;\n","import to from 'await-to-js';\n\ninterface LatLon {\n  latitude: number;\n  longitude: number;\n}\n\nexport enum Prefix {\n  AUTOCOMPLETE = 'locations/v1/cities/autocomplete',\n  CURRENT_CONDITIONS = 'currentconditions/v1',\n  FIVE_DAY_FORECAST = 'forecasts/v1/daily/5day',\n  GEOPOSITION = 'locations/v1/cities/geoposition/search',\n  GET_INFO_BY_KEY = 'locations/v1/',\n}\n\nexport interface LocationInfoResponse {\n  Key: string;\n  LocalizedName: string;\n  Country: { ID: string; LocalizedName: string };\n  AdministrativeArea: { ID: string; LocalizedName: string };\n}\n\nexport interface CurrentConditionsResponse {\n  WeatherText: string;\n  WeatherIcon: number;\n  Temperature: {\n    Metric: {\n      Value: number;\n    };\n    Imperial: {\n      Value: number;\n    };\n  };\n}\n\ninterface SingleForecast {\n  EpochDate: number;\n  Temperature: {\n    Minimum: {\n      Value: number;\n      Unit: 'F' | 'C';\n    };\n    Maximum: {\n      Value: number;\n      Unit: 'F' | 'C';\n    };\n  };\n  Day: {\n    Icon: number;\n  };\n  Night: {\n    Icon: number;\n  };\n}\n\nexport interface FiveDayForecastResponse {\n  DailyForecasts: SingleForecast[];\n}\n\ninterface GeopositionResponse {\n  Key: string;\n}\n\nexport type CombinedData = [\n  CurrentConditionsResponse,\n  LocationInfoResponse,\n  FiveDayForecastResponse\n];\n\nclass AccuWeatherApi {\n  #url: string = 'https://dataservice.accuweather.com';\n  #apiKey: string = `${process.env.REACT_APP_WEATHER_API_KEY}`;\n  #assetsUrl: string =\n    'https://herolo-assets.s3.us-east-2.amazonaws.com/images';\n  #headers = {\n    method: 'GET',\n  };\n\n  public async getAutocompleteSearch(\n    query: string\n  ): Promise<LocationInfoResponse[]> {\n    const queryParams = new URLSearchParams({\n      apikey: this.#apiKey,\n      q: query,\n    }).toString();\n    const response = fetch(\n      `${this.#url}/${Prefix.AUTOCOMPLETE}?${queryParams}`,\n      this.#headers\n    );\n    const [error, data] = await to(response);\n    if (error) console.log(error);\n    return (await data?.json()) as Promise<LocationInfoResponse[]>;\n  }\n\n  public async getCurrentConditions(\n    key: string\n  ): Promise<CurrentConditionsResponse> {\n    console.log('executing get current conditions');\n    const queryParams = new URLSearchParams({\n      apikey: this.#apiKey,\n    }).toString();\n    const response = fetch(\n      `${this.#url}/${Prefix.CURRENT_CONDITIONS}/${key}?${queryParams}`,\n      this.#headers\n    );\n    const [error, data] = await to(response);\n    if (error) console.log(error);\n    return (await data?.json())[0] as Promise<CurrentConditionsResponse>;\n  }\n\n  public async getFiveDayForecast(\n    key: string\n  ): Promise<FiveDayForecastResponse> {\n    console.log('executing get five day forecast');\n    const queryParams = new URLSearchParams({\n      apikey: this.#apiKey,\n    }).toString();\n    const response = fetch(\n      `${this.#url}/${Prefix.FIVE_DAY_FORECAST}/${key}?${queryParams}`,\n      this.#headers\n    );\n    const [error, data] = await to(response);\n    if (error) console.log(error);\n    return (await data?.json()) as Promise<FiveDayForecastResponse>;\n  }\n\n  public async getGeopositionSearch({\n    latitude,\n    longitude,\n  }: LatLon): Promise<GeopositionResponse> {\n    const queryParams = new URLSearchParams({\n      apikey: this.#apiKey,\n      q: `${latitude},${longitude}`,\n    }).toString();\n    const response = fetch(\n      `${this.#url}/${Prefix.GEOPOSITION}?${queryParams}`,\n      this.#headers\n    );\n    const [error, data] = await to(response);\n    if (error) console.log(error);\n    return (await data?.json()) as Promise<GeopositionResponse>;\n  }\n\n  public async getLocationInfoByKey(key: string) {\n    console.log('executing get location info');\n    const queryParams = new URLSearchParams({\n      apikey: this.#apiKey,\n    }).toString();\n    const response = fetch(\n      `${this.#url}/${Prefix.GET_INFO_BY_KEY}/${key}?${queryParams}`\n    );\n    const [error, data] = await to(response);\n    if (error) console.log(error);\n    return (await data?.json()) as Promise<LocationInfoResponse>;\n  }\n\n  public getImageUrl(id: number) {\n    return `${this.#assetsUrl}/${id}-s.png`;\n  }\n  public async getCombinedData(key: string): Promise<CombinedData> {\n    return Promise.all([\n      this.getCurrentConditions(key),\n      this.getLocationInfoByKey(key),\n      this.getFiveDayForecast(key),\n    ]);\n  }\n  public getCombinedDataCallback(\n    key: string,\n    callback: (combinedData: CombinedData) => void\n  ) {\n    this.getCombinedData(key).then(callback);\n  }\n}\n\nexport default new AccuWeatherApi();\n","import AccuWeatherAPI, {\n  LocationInfoResponse,\n  CurrentConditionsResponse,\n  FiveDayForecastResponse,\n} from '../../api/AccuWeatherAPI';\nimport { AnyAction, Reducer } from 'redux';\nimport to from 'await-to-js';\nimport TestObject from '../../apiTest';\n\ninterface WeatherState {\n  celsius: boolean;\n  favorites: string[];\n  current: {\n    conditions: CurrentConditionsResponse;\n    info: LocationInfoResponse;\n    fiveDayForecast: FiveDayForecastResponse;\n  };\n  searchResults: LocationInfoResponse[];\n}\n\nexport enum WeatherActionCode {\n  TOGGLE = 'TOGGLE_CELSIUS_FAHRENHEIT',\n  ADD_FAVORITE = 'ADD_WEATHER_KEY_TO_FAVORITES',\n  REMOVE_FAVORITE = 'REMOVE_WEATHER_KEY_FROM_FAVORITES',\n  CHANGE_CURRENT = 'CHANGE_CURRENT_WEATHER_KEY',\n  ADD_RESULTS = 'ADD_AUTOCOMPLETE_WEATHER_RESULTS',\n  RETURN = 'RETURN_TO_MAIN_DISPLAY',\n}\n\ninterface WeatherAction extends AnyAction {\n  type: WeatherActionCode;\n  payload?: {\n    key?: string;\n    results?: LocationInfoResponse[];\n    current?: {\n      conditions: CurrentConditionsResponse;\n      info: LocationInfoResponse;\n      fiveDayForecast: FiveDayForecastResponse;\n    };\n  };\n}\n\nconst initialState: WeatherState = {\n  celsius: true,\n  favorites: [],\n  current: TestObject,\n  searchResults: [],\n};\n\nconst defaultKey = '3383898';\n\nexport async function getCurrentPositionKey(): Promise<string> {\n  if (navigator && navigator.geolocation) {\n    const position = await new Promise(\n      (resolve: (g: GeolocationPosition) => void, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      }\n    );\n    const latLon = {\n      longitude: position.coords.longitude,\n      latitude: position.coords.latitude,\n    };\n    const [error, data] = await to(AccuWeatherAPI.getGeopositionSearch(latLon));\n    if (error) return defaultKey;\n    return data!.Key;\n  }\n  return defaultKey;\n}\n\nconst weather: Reducer<WeatherState, WeatherAction> = (\n  state: WeatherState = initialState,\n  action: WeatherAction\n) => {\n  switch (action.type) {\n    case WeatherActionCode.TOGGLE:\n      return { ...state, celsius: !state.celsius };\n    case WeatherActionCode.ADD_FAVORITE:\n      return {\n        ...state,\n        favorites: [...state.favorites, action.payload.key],\n      };\n    case WeatherActionCode.REMOVE_FAVORITE:\n      return {\n        ...state,\n        favorites: state.favorites.filter((key) => key !== action.payload.key),\n      };\n    case WeatherActionCode.CHANGE_CURRENT:\n      return {\n        ...state,\n        current: action.payload.current,\n      };\n    case WeatherActionCode.ADD_RESULTS:\n      return {\n        ...state,\n        searchResults: action.payload.results,\n      };\n    case WeatherActionCode.RETURN:\n      return {\n        ...state,\n        searchResults: [],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default weather;\n","import {\n  CurrentConditionsResponse,\n  FiveDayForecastResponse,\n  LocationInfoResponse,\n} from './api/AccuWeatherAPI';\n\nconst TestObject: {\n  conditions: CurrentConditionsResponse;\n  info: LocationInfoResponse;\n  fiveDayForecast: FiveDayForecastResponse;\n} = {\n  conditions: {\n    WeatherText: 'Mostly cloudy',\n    WeatherIcon: 6,\n    Temperature: {\n      Metric: {\n        Value: 22.2,\n      },\n      Imperial: {\n        Value: 72,\n      },\n    },\n  },\n  info: {\n    Key: '221329',\n    LocalizedName: 'Georgia',\n    Country: {\n      ID: 'JM',\n      LocalizedName: 'Jamaica',\n    },\n    AdministrativeArea: {\n      ID: '07',\n      LocalizedName: 'Trelawny',\n    },\n  },\n  fiveDayForecast: {\n    DailyForecasts: [\n      {\n        EpochDate: 1626346800,\n        Temperature: {\n          Minimum: {\n            Value: 56,\n            Unit: 'F',\n          },\n          Maximum: {\n            Value: 77,\n            Unit: 'F',\n          },\n        },\n        Day: {\n          Icon: 18,\n        },\n        Night: {\n          Icon: 35,\n        },\n      },\n      {\n        EpochDate: 1626433200,\n        Temperature: {\n          Minimum: {\n            Value: 60,\n            Unit: 'F',\n          },\n          Maximum: {\n            Value: 74,\n            Unit: 'F',\n          },\n        },\n        Day: {\n          Icon: 4,\n        },\n        Night: {\n          Icon: 40,\n        },\n      },\n      {\n        EpochDate: 1626519600,\n        Temperature: {\n          Minimum: {\n            Value: 59,\n            Unit: 'F',\n          },\n          Maximum: {\n            Value: 75,\n            Unit: 'F',\n          },\n        },\n        Day: {\n          Icon: 12,\n        },\n        Night: {\n          Icon: 7,\n        },\n      },\n      {\n        EpochDate: 1626606000,\n        Temperature: {\n          Minimum: {\n            Value: 60,\n            Unit: 'F',\n          },\n          Maximum: {\n            Value: 79,\n            Unit: 'F',\n          },\n        },\n        Day: {\n          Icon: 12,\n        },\n        Night: {\n          Icon: 34,\n        },\n      },\n      {\n        EpochDate: 1626692400,\n        Temperature: {\n          Minimum: {\n            Value: 62,\n            Unit: 'F',\n          },\n          Maximum: {\n            Value: 79,\n            Unit: 'F',\n          },\n        },\n        Day: {\n          Icon: 1,\n        },\n        Night: {\n          Icon: 34,\n        },\n      },\n    ],\n  },\n};\n\nexport default TestObject;\n","import theme from './themeReducer';\nimport weather from './weatherReducer';\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({ theme, weather });\nexport default rootReducer;\n","import rootReducer from './reducers/rootReducer';\nimport { createStore } from 'redux';\nimport { FC } from 'react';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n  rootReducer,\n  {},\n  (window as any)['__REDUX_DEVTOOLS_EXTENSION__'] &&\n    (window as any)['__REDUX_DEVTOOLS_EXTENSION__']()\n);\nconst StoreProvider: FC = ({ children }) => {\n  return <Provider store={store}>{children}</Provider>;\n};\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport default StoreProvider;\n","import { AppDispatch, RootState } from '../store/StoreProvider';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { FC } from 'react';\nimport { useAppSelector } from '../hooks/hooks';\nimport { Box, createTheme, CssBaseline } from '@material-ui/core';\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/styles';\n\nfunction theme(darkMode: boolean) {\n  return createTheme({\n    palette: {\n      type: darkMode ? 'dark' : 'light',\n      primary: {\n        main: '#002884',\n        contrastText: '#fff',\n      },\n      secondary: {\n        main: '#606CA8',\n        contrastText: '#000',\n      },\n    },\n  });\n}\n\nconst ThemeProvider: FC = ({ children }) => {\n  const darkThemeEnabled = useAppSelector((state) => state.theme.dark);\n  return (\n    <MuiThemeProvider theme={theme(darkThemeEnabled)}>\n      <CssBaseline>\n        <Box maxWidth=\"100vw\" minHeight=\"100vh\" bgcolor=\"background.paper\">\n          {children}\n        </Box>\n      </CssBaseline>\n    </MuiThemeProvider>\n  );\n};\n\nexport default ThemeProvider;\n","import { useAppDispatch, useAppSelector } from '../hooks/hooks';\nimport { Button } from '@material-ui/core';\nimport { MoonFill, SunFill } from 'react-bootstrap-icons';\nimport { ThemeActionCode } from '../store/reducers/themeReducer';\nimport { WeatherActionCode } from '../store/reducers/weatherReducer';\n\nconst ThemeSwitch = () => {\n  const dispatch = useAppDispatch();\n  const darkThemeEnabled = useAppSelector((state) => state.theme.dark);\n  const celsius = useAppSelector((state) => state.weather.celsius);\n\n  return (\n    <>\n      <Button\n        style={{ margin: '1em' }}\n        onClick={() => dispatch({ type: ThemeActionCode.TOGGLE })}\n      >\n        {darkThemeEnabled ? <SunFill size={15} /> : <MoonFill size={15} />}\n      </Button>\n      <Button\n        style={{ margin: '1em' }}\n        onClick={() => dispatch({ type: WeatherActionCode.TOGGLE })}\n      >\n        {celsius ? 'F' : 'C'}\n      </Button>\n    </>\n  );\n};\n\nexport default ThemeSwitch;\n","import Switches from './ThemeSwitch';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { FC, memo } from 'react';\nimport { Box, Hidden, Link } from '@material-ui/core';\n\n//TODO: make LINKS general file to combine in Routes and here\nconst Links: FC = () => {\n  return (\n    <Box\n      display=\"flex\"\n      alignItems=\"center\"\n      width=\"30vw\"\n      justifyContent=\"flex-end\"\n      color=\"secondary.main\"\n    >\n      <Link\n        style={{ margin: '1em', minWidth: '4em' }}\n        color=\"textPrimary\"\n        component={RouterLink}\n        to=\"/\"\n      >\n        Home\n      </Link>\n      <Link\n        style={{ margin: '1em', minWidth: '4em' }}\n        color=\"textPrimary\"\n        component={RouterLink}\n        to=\"/favorites\"\n      >\n        Favorites\n      </Link>\n      <Hidden smDown>\n        <Switches />\n      </Hidden>\n    </Box>\n  );\n};\n\nexport default memo(Links);\n","import Links from './Links';\nimport { FC, memo } from 'react';\nimport { Box, Typography } from '@material-ui/core';\n\nconst Navbar: FC = () => {\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      bgcolor=\"secondary.main\"\n    >\n      <Typography\n        variant=\"h5\"\n        style={{ marginLeft: '2em', fontStyle: 'italic' }}\n      >\n        Weather App\n      </Typography>\n      <Links />\n    </Box>\n  );\n};\n\nexport default memo(Navbar);\n","import AccuWeatherAPI from '../api/AccuWeatherAPI';\nimport { FC, useRef } from 'react';\nimport { Box, Button, TextField } from '@material-ui/core';\nimport { useAppDispatch } from '../hooks/hooks';\nimport { WeatherActionCode } from '../store/reducers/weatherReducer';\n\nconst Search: FC = () => {\n  const textFieldRef = useRef<HTMLInputElement>();\n  const dispatch = useAppDispatch();\n  const onSearch = () => {\n    if (textFieldRef.current.value === '')\n      dispatch({ type: WeatherActionCode.RETURN });\n    else\n      AccuWeatherAPI.getAutocompleteSearch(textFieldRef.current.value).then(\n        (values) => {\n          dispatch({\n            type: WeatherActionCode.ADD_RESULTS,\n            payload: { results: values },\n          });\n        }\n      );\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      width=\"40%\"\n      margin=\"2em\"\n      justifyContent=\"space-around\"\n      alignItems=\"center\"\n    >\n      <TextField fullWidth type=\"search\" inputRef={textFieldRef} />\n      <Button onClick={onSearch}>Search</Button>\n    </Box>\n  );\n};\n\nexport default Search;\n","import AccuWeatherAPI, { LocationInfoResponse } from '../api/AccuWeatherAPI';\nimport { WeatherActionCode } from '../store/reducers/weatherReducer';\nimport { FC } from 'react';\nimport { useAppDispatch, useAppSelector } from '../hooks/hooks';\nimport {\n  Card,\n  CardActionArea,\n  CardContent,\n  Grid,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\n\nconst ResultsDisplay: FC = () => {\n  const results = useAppSelector((state) => state.weather.searchResults);\n  const dispatch = useAppDispatch();\n  const theme = useTheme();\n  const largeScreenBreakpoint = useMediaQuery(theme.breakpoints.up('lg'));\n\n  const onCardSelected = (selected: LocationInfoResponse) => {\n    const key = selected.Key;\n    AccuWeatherAPI.getCombinedDataCallback(\n      key,\n      ([conditions, info, fiveDayForecast]) => {\n        dispatch({\n          type: WeatherActionCode.CHANGE_CURRENT,\n          payload: { current: { conditions, info, fiveDayForecast } },\n        });\n        dispatch({ type: WeatherActionCode.RETURN });\n      }\n    );\n  };\n\n  return (\n    <Grid container direction=\"row\" justifyContent=\"center\" spacing={5}>\n      {results.map((info, index) => (\n        <Grid\n          style={{ margin: '1em', textAlign: 'center' }}\n          item\n          key={index}\n          xs={12}\n          lg={2}\n        >\n          <Card\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <CardActionArea\n              style={{ minHeight: largeScreenBreakpoint ? '20vh' : '10vh' }}\n              onClick={() => onCardSelected(info)}\n            >\n              <CardContent>\n                <Typography>\n                  {info.LocalizedName}, {info.AdministrativeArea.LocalizedName},{' '}\n                  {info.Country.LocalizedName}\n                </Typography>\n              </CardContent>\n            </CardActionArea>\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default ResultsDisplay;\n","import AccuWeatherAPI, {\n  CurrentConditionsResponse,\n  LocationInfoResponse,\n} from '../api/AccuWeatherAPI';\nimport { FC } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport { useAppSelector } from '../hooks/hooks';\n\ninterface WeatherSummaryProps {\n  conditions: CurrentConditionsResponse;\n  info: LocationInfoResponse;\n}\n\nconst WeatherSummary: FC<WeatherSummaryProps> = ({ conditions, info }) => {\n  const { WeatherIcon, Temperature } = conditions;\n  const { LocalizedName } = info;\n  const celsius = useAppSelector((state) => state.weather.celsius);\n  const temperature = Temperature[celsius ? 'Metric' : 'Imperial'].Value;\n  return (\n    <Box\n      display=\"flex\"\n      width=\"30vw\"\n      alignItems=\"center\"\n      color=\"background.main\"\n      style={{ margin: '2em' }}\n    >\n      <div>\n        <img\n          src={AccuWeatherAPI.getImageUrl(WeatherIcon)}\n          alt=\"weather-summary-icon\"\n        />\n      </div>\n      <Box>\n        <Typography variant=\"h5\" color=\"textPrimary\">\n          {LocalizedName}\n        </Typography>\n        <Typography variant=\"h5\" color=\"textPrimary\">\n          {temperature}° {celsius ? 'C' : 'F'}\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default WeatherSummary;\n","import { FC } from 'react';\nimport { HeartFill, Heart } from 'react-bootstrap-icons';\nimport { Box, Button, withStyles } from '@material-ui/core';\nimport { LocationInfoResponse } from '../api/AccuWeatherAPI';\nimport { WeatherActionCode } from '../store/reducers/weatherReducer';\nimport { useAppDispatch, useAppSelector } from '../hooks/hooks';\nimport { red } from '@material-ui/core/colors';\n\ninterface AddToFavoritesWidgetProps {\n  info: LocationInfoResponse;\n}\n\nconst ColorButton = withStyles(() => ({\n  root: {\n    color: red[500],\n  },\n}))(Button);\n\nconst AddToFavoritesWidget: FC<AddToFavoritesWidgetProps> = ({ info }) => {\n  const { Key } = info;\n  const dispatch = useAppDispatch();\n  const favorites = useAppSelector((state) => state.weather.favorites);\n  const isFavorited = favorites.includes(Key);\n\n  const onAddToFavoritesClick = () => {\n    dispatch({\n      type: isFavorited\n        ? WeatherActionCode.REMOVE_FAVORITE\n        : WeatherActionCode.ADD_FAVORITE,\n      payload: { key: Key },\n    });\n  };\n\n  return (\n    <Box\n      color=\"secondary.main\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-around\"\n    >\n      <ColorButton onClick={onAddToFavoritesClick}>\n        {isFavorited ? <HeartFill size={50} /> : <Heart size={50} />}\n      </ColorButton>\n    </Box>\n  );\n};\n\nexport default AddToFavoritesWidget;\n","import AccuWeatherAPI, { FiveDayForecastResponse } from '../api/AccuWeatherAPI';\nimport { FC } from 'react';\nimport {\n  Card,\n  CardActionArea,\n  CardContent,\n  Grid,\n  Typography,\n} from '@material-ui/core';\nimport { useAppSelector } from '../hooks/hooks';\n\ninterface FiveDayForecastWidgetProps {\n  forecast: FiveDayForecastResponse;\n}\n\nconst FiveDayForecastWidget: FC<FiveDayForecastWidgetProps> = ({\n  forecast,\n}) => {\n  const celsius = useAppSelector((state) => state.weather.celsius);\n  const getDayFromEpoch = (epochTime: number): string => {\n    const days = [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n    ];\n    return days[new Date(epochTime * 1000).getDay()];\n  };\n  const getTemperatureRange = (\n    min: { Value: number; Unit: 'F' | 'C' },\n    max: { Value: number; Unit: 'F' | 'C' }\n  ): string => {\n    const unit = min.Unit;\n    const apiUnit = unit === 'C';\n    if (apiUnit === celsius) return `${min.Value}°-${max.Value}° ${unit}`;\n    if (min.Unit === 'F')\n      return `${Math.round((min.Value - 30) / 2)}°-${Math.round(\n        (max.Value - 30) / 2\n      )}° C`;\n    return `${Math.round(min.Value * 2 + 30)}°-${Math.round(\n      max.Value * 2 + 30\n    )}° F`;\n  };\n\n  return (\n    <Grid direction=\"row\" justifyContent=\"center\" container>\n      {forecast.DailyForecasts.map((forecast, index) => {\n        const max = forecast.Temperature.Maximum;\n        const min = forecast.Temperature.Minimum;\n        return (\n          <Grid style={{ margin: '2em', minWidth: '20em' }} item key={index}>\n            <Card>\n              <CardActionArea>\n                <CardContent style={{ textAlign: 'center' }}>\n                  <Typography variant=\"h6\">\n                    {getDayFromEpoch(forecast.EpochDate)}\n                  </Typography>\n                  <div>\n                    <Typography>Day</Typography>\n                    <img\n                      src={AccuWeatherAPI.getImageUrl(forecast.Day.Icon)}\n                      alt=\"day-weather-icon\"\n                    />\n                  </div>\n                  <Typography>Range {getTemperatureRange(min, max)}</Typography>\n                  <div>\n                    <img\n                      src={AccuWeatherAPI.getImageUrl(forecast.Night.Icon)}\n                      alt=\"night-weather-icon\"\n                    />\n                    <Typography>Night</Typography>\n                  </div>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport default FiveDayForecastWidget;\n","import WeatherSummary from './WeatherSummary';\nimport AddToFavoritesWidget from './AddToFavoritesWidget';\nimport FiveDayForecastWidget from './FiveDayForecastWidget';\nimport { FC, memo } from 'react';\nimport { useAppSelector } from '../hooks/hooks';\nimport { Box, Typography, useMediaQuery, useTheme } from '@material-ui/core';\n\nconst WeatherDisplay: FC = () => {\n  const current = useAppSelector((state) => state.weather.current);\n  const { conditions, info, fiveDayForecast } = current;\n  const theme = useTheme();\n  const mediumScreenBreakpoint = useMediaQuery(theme.breakpoints.up('md'));\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      {current && (\n        <>\n          <Box\n            display=\"flex\"\n            width=\"80%\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n          >\n            <WeatherSummary conditions={conditions} info={info} />\n            <AddToFavoritesWidget info={info} />\n          </Box>\n          <Box style={{ margin: '0 auto' }} color=\"secondary.main\">\n            <Typography\n              variant=\"h2\"\n              color=\"textPrimary\"\n              style={{ fontSize: mediumScreenBreakpoint ? '4em' : '3em' }}\n            >\n              \"{current.conditions.WeatherText}\"\n            </Typography>\n          </Box>\n          <FiveDayForecastWidget forecast={fiveDayForecast} />\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default memo(WeatherDisplay);\n","import ResultsDisplay from './ResultsDisplay';\nimport WeatherDisplay from './WeatherDisplay';\nimport { FC } from 'react';\nimport { useAppSelector } from '../hooks/hooks';\nimport { Box } from '@material-ui/core';\n\nconst MainDisplay: FC = () => {\n  const results = useAppSelector((state) => state.weather.searchResults);\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      width=\"100%\"\n      minHeight=\"75vh\"\n      bgcolor=\"background.default\"\n    >\n      {results.length ? <ResultsDisplay /> : <WeatherDisplay />}\n    </Box>\n  );\n};\n\nexport default MainDisplay;\n","import Search from '../components/Search';\nimport MainDisplay from '../components/MainDisplay';\nimport AccuWeatherAPI from '../api/AccuWeatherAPI';\nimport useAsyncEffect from 'use-async-effect';\nimport { FC, useState } from 'react';\nimport {\n  getCurrentPositionKey,\n  WeatherActionCode,\n} from '../store/reducers/weatherReducer';\nimport { useAppDispatch } from '../hooks/hooks';\n\nconst Home: FC = () => {\n  const dispatch = useAppDispatch();\n  const [mount, setMount] = useState<boolean>(false);\n  useAsyncEffect(async () => {\n    //const key = await getCurrentPositionKey();\n    //AccuWeatherAPI.getCombinedDataCallback(\n    //  key,\n    //  ([conditions, info, fiveDayForecast]) => {\n    //    dispatch({\n    //      type: WeatherActionCode.CHANGE_CURRENT,\n    //      payload: { current: { info, conditions, fiveDayForecast } },\n    //    });\n    //    setMount(true);\n    //  }\n    //);\n    setMount(true);\n  }, []);\n\n  return (\n    <>\n      <Search />\n      {mount && <MainDisplay />}\n    </>\n  );\n};\n\nexport default Home;\n","import AccuWeatherAPI, { CombinedData } from '../api/AccuWeatherAPI';\nimport { FC } from 'react';\nimport { WeatherActionCode } from '../store/reducers/weatherReducer';\nimport {\n  Card,\n  CardActionArea,\n  CardContent,\n  Grid,\n  Typography,\n} from '@material-ui/core';\nimport { useAppDispatch, useAppSelector } from '../hooks/hooks';\nimport { useHistory } from 'react-router-dom';\n\ninterface FavoritesGridProps {\n  combinedDataArray: CombinedData[];\n}\n\nconst FavoritesGrid: FC<FavoritesGridProps> = ({ combinedDataArray }) => {\n  const celsius = useAppSelector((state) => state.weather.celsius);\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n\n  const onCardClick = (combinedData: CombinedData) => {\n    const [conditions, info, fiveDayForecast] = combinedData;\n    dispatch({\n      type: WeatherActionCode.CHANGE_CURRENT,\n      payload: { current: { conditions, info, fiveDayForecast } },\n    });\n    history.push('/');\n  };\n\n  return (\n    <Grid\n      style={{ width: '90%' }}\n      direction=\"row\"\n      justifyContent=\"center\"\n      container\n      spacing={5}\n    >\n      {combinedDataArray.map((combinedData, index) => {\n        const [conditions, info] = combinedData;\n        const temperature = celsius\n          ? conditions.Temperature.Metric.Value\n          : conditions.Temperature.Imperial.Value;\n        const unit = celsius ? 'C' : 'F';\n        return (\n          <Grid style={{ margin: '2em', minWidth: '20em' }} item key={index}>\n            <Card>\n              <CardActionArea onClick={() => onCardClick(combinedData)}>\n                <CardContent style={{ textAlign: 'center' }}>\n                  <Typography>{info.LocalizedName}</Typography>\n                  <Typography>\n                    {temperature}° {unit}\n                  </Typography>\n                  <div>\n                    <img\n                      src={AccuWeatherAPI.getImageUrl(conditions.WeatherIcon)}\n                      alt={`favorites-weather-icon-${index}`}\n                    />\n                  </div>\n                  <Typography>{conditions.WeatherText}</Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport default FavoritesGrid;\n","import useAsyncEffect from 'use-async-effect';\nimport AccuWeatherAPI, { CombinedData } from '../api/AccuWeatherAPI';\nimport FavoritesGrid from '../components/FavoritesGrid';\nimport { FC, useState } from 'react';\nimport { useAppSelector } from '../hooks/hooks';\nimport { Typography } from '@material-ui/core';\n\nconst Favorites: FC = () => {\n  const favorites = useAppSelector((state) => state.weather.favorites);\n  const [combinedData, setCombinedData] = useState<CombinedData[]>([]);\n  const [mount, setMount] = useState<boolean>(false);\n\n  useAsyncEffect(async () => {\n    const combinedDataArray = await Promise.all(\n      favorites.map(\n        async (key: string) => await AccuWeatherAPI.getCombinedData(key)\n      )\n    );\n    setCombinedData(combinedDataArray);\n    setMount(true);\n    return () => setMount(false);\n  }, []);\n\n  return (\n    <>\n      <Typography variant=\"h3\" style={{ margin: '1em' }} color=\"textPrimary\">\n        Favorites Page\n      </Typography>\n      {mount && <FavoritesGrid combinedDataArray={combinedData} />}\n    </>\n  );\n};\n\nexport default Favorites;\n","import Home from './Home';\nimport Favorites from './Favorites';\nimport { FC } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nconst Routes: FC = () => {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/favorites\" exact component={Favorites} />\n    </Switch>\n  );\n};\n\nexport default Routes;\n","import Routes from '../pages/Routes';\nimport { FC } from 'react';\nimport { Box } from '@material-ui/core';\n\nconst Content: FC = () => {\n  return (\n    <Box display=\"flex\" alignItems=\"center\" flexDirection=\"column\">\n      <Routes />\n    </Box>\n  );\n};\n\nexport default Content;\n","import Navbar from '../components/Navbar';\nimport Content from '../components/Content';\nimport { FC } from 'react';\n\nconst Main: FC = () => {\n  return (\n    <>\n      <Navbar />\n      <Content />\n    </>\n  );\n};\n\nexport default Main;\n","import ReactDOM from 'react-dom';\nimport StoreProvider from './store/StoreProvider';\nimport ThemeProvider from './style/ThemeProvider';\nimport Main from './pages/Main';\nimport { FC } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst App: FC = () => {\n  return (\n    <StoreProvider>\n      <ThemeProvider>\n        <Router>\n          <Main />\n        </Router>\n      </ThemeProvider>\n    </StoreProvider>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}