{"version":3,"sources":["store/reducers/themeReducer.ts","api/AccuWeatherAPI.ts","store/reducers/weatherReducer.ts","apiTest.ts","store/reducers/rootReducer.ts","store/StoreProvider.tsx","localStorage/localStorage.ts","hooks/hooks.tsx","style/ThemeProvider.tsx","components/ThemeSwitch.tsx","components/Home/Search.tsx","components/Home/MainDisplay/ResultsDisplay.tsx","components/Home/MainDisplay/WeatherDisplay/WeatherSummary.tsx","components/Home/MainDisplay/WeatherDisplay/AddToFavoritesWidget.tsx","components/Home/MainDisplay/WeatherDisplay/FiveDayForecastWidget.tsx","components/Home/MainDisplay/WeatherDisplay/WeatherDisplay.tsx","components/Home/MainDisplay/MainDisplay.tsx","components/ErrorDisplay.tsx","pages/Home.tsx","components/Favorites/FavoritesGrid.tsx","routes/routes.ts","pages/Favorites.tsx","components/Links.tsx","components/Navbar/Navbar.tsx","pages/Routes.tsx","components/Content.tsx","pages/Main.tsx","index.tsx"],"names":["ThemeActionCode","initialState","dark","window","matchMedia","matches","EndPoint","theme","state","action","type","TOGGLE","WeatherActionCode","process","method","endPoint","query","key","queryParams","URLSearchParams","apikey","this","toString","response","fetch","to","error","data","console","log","ok","statusText","Error","CURRENT_CONDITIONS","json","q","request","AUTOCOMPLETE","FIVE_DAY_FORECAST","latitude","longitude","GEOPOSITION","GET_INFO_BY_KEY","id","Promise","all","getCurrentConditions","getLocationInfoByKey","getFiveDayForecast","callback","onError","getCombinedData","then","catch","e","TestObject","conditions","WeatherText","WeatherIcon","Temperature","Metric","Value","Imperial","info","Key","LocalizedName","Country","ID","AdministrativeArea","fiveDayForecast","DailyForecasts","EpochDate","Minimum","Unit","Maximum","Day","Icon","Night","celsius","favorites","current","searchResults","defaultKey","getCurrentPositionKey","a","navigator","geolocation","resolve","reject","getCurrentPosition","position","latLon","coords","AccuWeatherAPI","getGeopositionSearch","weather","ADD_FAVORITE","payload","REMOVE_FAVORITE","filter","CHANGE_CURRENT","ADD_RESULTS","results","RETURN","rootReducer","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","loadState","store","createStore","subscribe","_throttle","stringify","setItem","saveState","getState","StoreProvider","children","useAppDispatch","useDispatch","useAppSelector","useSelector","ThemeProvider","darkMode","darkThemeEnabled","createTheme","palette","primary","main","contrastText","CssBaseline","Box","maxWidth","minHeight","bgcolor","ThemeSwitch","dispatch","Button","style","margin","onClick","size","Search","textFieldRef","useRef","onSearch","value","getAutocompleteSearch","values","display","width","justifyContent","alignItems","TextField","fullWidth","inputRef","onKeyPress","code","ResultsDisplay","useTheme","largeScreenBreakpoint","useMediaQuery","breakpoints","up","Grid","container","direction","map","index","textAlign","item","xs","lg","Card","CardActionArea","selected","getCombinedDataCallback","onCardSelected","CardContent","Typography","WeatherSummary","temperature","color","src","getImageUrl","alt","variant","ColorButton","withStyles","root","red","AddToFavoritesWidget","isFavorited","includes","FiveDayForecastWidget","forecast","getTemperatureRange","min","max","unit","Math","round","epochTime","minWidth","Date","getDay","WeatherDisplay","mediumScreenBreakpoint","flexDirection","fontSize","memo","MainDisplay","length","ErrorDisplay","getLatestErrorMessage","Home","useState","mount","setMount","setError","useAsyncEffect","FavoritesGrid","combinedDataArray","history","useHistory","combinedData","push","routes","home","onCardClick","name","component","setCombinedData","Links","Object","route","Link","RouterLink","Hidden","smDown","Navbar","marginLeft","fontStyle","Routes","path","exact","Content","Main","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec2e8084.chunk.js","sourcesContent":["import { AnyAction, Reducer } from 'redux';\n\ninterface ThemeState {\n  dark: boolean;\n}\n\nexport enum ThemeActionCode {\n  TOGGLE = 'TOGGLE_DARK_THEME',\n}\n\ninterface ThemeAction extends AnyAction {\n  type: ThemeActionCode;\n}\n\nconst initialState: ThemeState = {\n  dark: isBrowserDarkMode(),\n};\n\nfunction isBrowserDarkMode(): boolean {\n  if (window.matchMedia)\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\n  return false;\n}\n\nconst theme: Reducer<ThemeState, ThemeAction> = (\n  state: ThemeState = initialState,\n  action: ThemeAction\n) => {\n  switch (action.type) {\n    case ThemeActionCode.TOGGLE:\n      return { ...state, dark: !state.dark };\n    default:\n      return state;\n  }\n};\n\nexport default theme;\n","import to from 'await-to-js';\n\ninterface LatLon {\n  latitude: number;\n  longitude: number;\n}\n\nexport enum EndPoint {\n  AUTOCOMPLETE = 'locations/v1/cities/autocomplete/',\n  CURRENT_CONDITIONS = 'currentconditions/v1/',\n  FIVE_DAY_FORECAST = 'forecasts/v1/daily/5day/',\n  GEOPOSITION = 'locations/v1/cities/geoposition/search/',\n  GET_INFO_BY_KEY = 'locations/v1/',\n}\n\nexport interface LocationInfoResponse {\n  Key: string;\n  LocalizedName: string;\n  Country: { ID: string; LocalizedName: string };\n  AdministrativeArea: { ID: string; LocalizedName: string };\n}\n\nexport interface CurrentConditionsResponse {\n  WeatherText: string;\n  WeatherIcon: number;\n  Temperature: {\n    Metric: {\n      Value: number;\n    };\n    Imperial: {\n      Value: number;\n    };\n  };\n}\n\ninterface SingleForecast {\n  EpochDate: number;\n  Temperature: {\n    Minimum: {\n      Value: number;\n      Unit: 'F' | 'C';\n    };\n    Maximum: {\n      Value: number;\n      Unit: 'F' | 'C';\n    };\n  };\n  Day: {\n    Icon: number;\n  };\n  Night: {\n    Icon: number;\n  };\n}\n\nexport interface FiveDayForecastResponse {\n  DailyForecasts: SingleForecast[];\n}\n\ninterface GeopositionResponse {\n  Key: string;\n}\n\nexport type CombinedData = [\n  CurrentConditionsResponse,\n  LocationInfoResponse,\n  FiveDayForecastResponse\n];\n\ninterface RequestParameters {\n  endPoint: EndPoint;\n  query?: Partial<{ q: string }>;\n  key?: string;\n}\n\nclass AccuWeatherApi {\n  readonly #url: string = 'https://dataservice.accuweather.com/';\n  readonly #apiKey: string = `${process.env.REACT_APP_WEATHER_API_KEY}`;\n  readonly #assetsUrl: string =\n    'https://herolo-assets.s3.us-east-2.amazonaws.com/images/';\n  readonly #headers = {\n    method: 'GET',\n  };\n  #latestError: string;\n\n  public async request<T>({\n    endPoint,\n    query = {},\n    key = '',\n  }: RequestParameters): Promise<T> {\n    const queryParams = new URLSearchParams({\n      apikey: this.#apiKey,\n      ...query,\n    }).toString();\n    const response = fetch(\n      `${this.#url}${endPoint}${key}?${queryParams}`,\n      this.#headers\n    );\n    const [error, data] = await to(response);\n    console.log(endPoint);\n    console.log('Error: ', error);\n    console.log('Data: ', data);\n    if (error || !data.ok) {\n      this.#latestError = `Failed due to: ${error || data.statusText}`;\n      throw new Error(`Failed due to: ${error || data.statusText}`);\n    }\n    if (endPoint === EndPoint.CURRENT_CONDITIONS)\n      return (await data.json())[0] as Promise<T>;\n    return (await data.json()) as Promise<T>;\n  }\n\n  public async getAutocompleteSearch(\n    q: string\n  ): Promise<LocationInfoResponse[]> {\n    return await this.request<LocationInfoResponse[]>({\n      endPoint: EndPoint.AUTOCOMPLETE,\n      query: { q },\n    });\n  }\n\n  public async getCurrentConditions(\n    key: string\n  ): Promise<CurrentConditionsResponse> {\n    return await this.request<CurrentConditionsResponse>({\n      endPoint: EndPoint.CURRENT_CONDITIONS,\n      key,\n    });\n  }\n\n  public async getFiveDayForecast(\n    key: string\n  ): Promise<FiveDayForecastResponse> {\n    return await this.request<FiveDayForecastResponse>({\n      endPoint: EndPoint.FIVE_DAY_FORECAST,\n      key,\n    });\n  }\n\n  public async getGeopositionSearch({\n    latitude,\n    longitude,\n  }: LatLon): Promise<GeopositionResponse> {\n    return await this.request<GeopositionResponse>({\n      endPoint: EndPoint.GEOPOSITION,\n      query: {\n        q: `${latitude},${longitude}`,\n      },\n    });\n  }\n\n  public async getLocationInfoByKey(\n    key: string\n  ): Promise<LocationInfoResponse> {\n    return await this.request<LocationInfoResponse>({\n      endPoint: EndPoint.GET_INFO_BY_KEY,\n      key,\n    });\n  }\n\n  public getImageUrl(id: number): string {\n    return `${this.#assetsUrl}${id}-s.png`;\n  }\n\n  public async getCombinedData(key: string): Promise<CombinedData> {\n    return Promise.all([\n      this.getCurrentConditions(key),\n      this.getLocationInfoByKey(key),\n      this.getFiveDayForecast(key),\n    ]);\n  }\n\n  public getCombinedDataCallback(\n    key: string,\n    callback: (combinedData: CombinedData) => void,\n    onError: (e: any) => void = console.log\n  ): void {\n    this.getCombinedData(key)\n      .then(callback)\n      .catch((e) => {\n        console.log('Error return on catch: ', e);\n        onError(e);\n      });\n  }\n\n  public getLatestErrorMessage(): string {\n    return this.#latestError;\n  }\n}\n\nexport default new AccuWeatherApi();\n","import AccuWeatherAPI, {\n  LocationInfoResponse,\n  CurrentConditionsResponse,\n  FiveDayForecastResponse,\n} from '../../api/AccuWeatherAPI';\nimport { AnyAction, Reducer } from 'redux';\nimport to from 'await-to-js';\nimport TestObject from '../../apiTest';\n\ninterface WeatherState {\n  celsius: boolean;\n  favorites: string[];\n  current: {\n    conditions: CurrentConditionsResponse;\n    info: LocationInfoResponse;\n    fiveDayForecast: FiveDayForecastResponse;\n  };\n  searchResults: LocationInfoResponse[];\n}\n\nexport enum WeatherActionCode {\n  TOGGLE = 'TOGGLE_CELSIUS_FAHRENHEIT',\n  ADD_FAVORITE = 'ADD_WEATHER_KEY_TO_FAVORITES',\n  REMOVE_FAVORITE = 'REMOVE_WEATHER_KEY_FROM_FAVORITES',\n  CHANGE_CURRENT = 'CHANGE_CURRENT_WEATHER_KEY',\n  ADD_RESULTS = 'ADD_AUTOCOMPLETE_WEATHER_RESULTS',\n  RETURN = 'RETURN_TO_MAIN_DISPLAY',\n}\n\ninterface WeatherAction extends AnyAction {\n  type: WeatherActionCode;\n  payload?: {\n    key?: string;\n    results?: LocationInfoResponse[];\n    current?: {\n      conditions: CurrentConditionsResponse;\n      info: LocationInfoResponse;\n      fiveDayForecast: FiveDayForecastResponse;\n    };\n  };\n}\n\nconst initialState: WeatherState = {\n  celsius: true,\n  favorites: [],\n  current: TestObject,\n  searchResults: [],\n};\n\nconst defaultKey = '3383898';\n\nexport async function getCurrentPositionKey(): Promise<string> {\n  if (navigator && navigator.geolocation) {\n    const position = await new Promise(\n      (resolve: (g: GeolocationPosition) => void, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      }\n    );\n    const latLon = {\n      longitude: position.coords.longitude,\n      latitude: position.coords.latitude,\n    };\n    const [error, data] = await to(AccuWeatherAPI.getGeopositionSearch(latLon));\n    if (error) return defaultKey;\n    return data!.Key;\n  }\n  return defaultKey;\n}\n\nconst weather: Reducer<WeatherState, WeatherAction> = (\n  state: WeatherState = initialState,\n  action: WeatherAction\n) => {\n  switch (action.type) {\n    case WeatherActionCode.TOGGLE:\n      return { ...state, celsius: !state.celsius };\n    case WeatherActionCode.ADD_FAVORITE:\n      return {\n        ...state,\n        favorites: [...state.favorites, action.payload.key],\n      };\n    case WeatherActionCode.REMOVE_FAVORITE:\n      return {\n        ...state,\n        favorites: state.favorites.filter((key) => key !== action.payload.key),\n      };\n    case WeatherActionCode.CHANGE_CURRENT:\n      return {\n        ...state,\n        current: action.payload.current,\n      };\n    case WeatherActionCode.ADD_RESULTS:\n      return {\n        ...state,\n        searchResults: action.payload.results,\n      };\n    case WeatherActionCode.RETURN:\n      return {\n        ...state,\n        searchResults: [],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default weather;\n","import {\n  CurrentConditionsResponse,\n  FiveDayForecastResponse,\n  LocationInfoResponse,\n} from './api/AccuWeatherAPI';\n\nconst TestObject: {\n  conditions: CurrentConditionsResponse;\n  info: LocationInfoResponse;\n  fiveDayForecast: FiveDayForecastResponse;\n} = {\n  conditions: {\n    WeatherText: 'Mostly cloudy',\n    WeatherIcon: 6,\n    Temperature: {\n      Metric: {\n        Value: 22.2,\n      },\n      Imperial: {\n        Value: 72,\n      },\n    },\n  },\n  info: {\n    Key: '221329',\n    LocalizedName: 'Georgia',\n    Country: {\n      ID: 'JM',\n      LocalizedName: 'Jamaica',\n    },\n    AdministrativeArea: {\n      ID: '07',\n      LocalizedName: 'Trelawny',\n    },\n  },\n  fiveDayForecast: {\n    DailyForecasts: [\n      {\n        EpochDate: 1626346800,\n        Temperature: {\n          Minimum: {\n            Value: 56,\n            Unit: 'F',\n          },\n          Maximum: {\n            Value: 77,\n            Unit: 'F',\n          },\n        },\n        Day: {\n          Icon: 18,\n        },\n        Night: {\n          Icon: 35,\n        },\n      },\n      {\n        EpochDate: 1626433200,\n        Temperature: {\n          Minimum: {\n            Value: 60,\n            Unit: 'F',\n          },\n          Maximum: {\n            Value: 74,\n            Unit: 'F',\n          },\n        },\n        Day: {\n          Icon: 4,\n        },\n        Night: {\n          Icon: 40,\n        },\n      },\n      {\n        EpochDate: 1626519600,\n        Temperature: {\n          Minimum: {\n            Value: 59,\n            Unit: 'F',\n          },\n          Maximum: {\n            Value: 75,\n            Unit: 'F',\n          },\n        },\n        Day: {\n          Icon: 12,\n        },\n        Night: {\n          Icon: 7,\n        },\n      },\n      {\n        EpochDate: 1626606000,\n        Temperature: {\n          Minimum: {\n            Value: 60,\n            Unit: 'F',\n          },\n          Maximum: {\n            Value: 79,\n            Unit: 'F',\n          },\n        },\n        Day: {\n          Icon: 12,\n        },\n        Night: {\n          Icon: 34,\n        },\n      },\n      {\n        EpochDate: 1626692400,\n        Temperature: {\n          Minimum: {\n            Value: 62,\n            Unit: 'F',\n          },\n          Maximum: {\n            Value: 79,\n            Unit: 'F',\n          },\n        },\n        Day: {\n          Icon: 1,\n        },\n        Night: {\n          Icon: 34,\n        },\n      },\n    ],\n  },\n};\n\nexport default TestObject;\n","import theme from './themeReducer';\nimport weather from './weatherReducer';\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({ theme, weather });\nexport default rootReducer;\n","import rootReducer from './reducers/rootReducer';\nimport _throttle from 'lodash/throttle';\nimport { createStore } from 'redux';\nimport { FC } from 'react';\nimport { Provider } from 'react-redux';\nimport { loadState, saveState } from '../localStorage/localStorage';\n\nconst persistedState = loadState();\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  (window as any)['__REDUX_DEVTOOLS_EXTENSION__'] &&\n    (window as any)['__REDUX_DEVTOOLS_EXTENSION__']()\n);\nstore.subscribe(\n  _throttle(() => {\n    saveState(store.getState());\n    localStorage.setItem('reduxState', JSON.stringify(store.getState()));\n  }, 1000)\n);\n\nconst StoreProvider: FC = ({ children }) => {\n  return <Provider store={store}>{children}</Provider>;\n};\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport default StoreProvider;\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) return undefined;\n    return JSON.parse(serializedState);\n  } catch (e) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: any) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (e) {\n    console.log(e);\n  }\n};\n","import { AppDispatch, RootState } from '../store/StoreProvider';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { FC } from 'react';\nimport { useAppSelector } from '../hooks/hooks';\nimport { Box, createTheme, CssBaseline } from '@material-ui/core';\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/styles';\n\nfunction theme(darkMode: boolean) {\n  return createTheme({\n    palette: {\n      type: darkMode ? 'dark' : 'light',\n      primary: {\n        main: '#606CA8',\n        contrastText: '#fff',\n      },\n    },\n  });\n}\n\nconst ThemeProvider: FC = ({ children }) => {\n  const darkThemeEnabled = useAppSelector((state) => state.theme.dark);\n  return (\n    <MuiThemeProvider theme={theme(darkThemeEnabled)}>\n      <CssBaseline>\n        <Box maxWidth=\"100vw\" minHeight=\"100vh\" bgcolor=\"background.paper\">\n          {children}\n        </Box>\n      </CssBaseline>\n    </MuiThemeProvider>\n  );\n};\n\nexport default ThemeProvider;\n","import { useAppDispatch, useAppSelector } from '../hooks/hooks';\nimport { Button } from '@material-ui/core';\nimport { MoonFill, SunFill } from 'react-bootstrap-icons';\nimport { ThemeActionCode } from '../store/reducers/themeReducer';\nimport { WeatherActionCode } from '../store/reducers/weatherReducer';\n\nconst ThemeSwitch = () => {\n  const dispatch = useAppDispatch();\n  const darkThemeEnabled = useAppSelector((state) => state.theme.dark);\n  const celsius = useAppSelector((state) => state.weather.celsius);\n\n  return (\n    <>\n      <Button\n        style={{ margin: '1em' }}\n        onClick={() => dispatch({ type: ThemeActionCode.TOGGLE })}\n      >\n        {darkThemeEnabled ? <SunFill size={15} /> : <MoonFill size={15} />}\n      </Button>\n      <Button\n        style={{ margin: '1em' }}\n        onClick={() => dispatch({ type: WeatherActionCode.TOGGLE })}\n      >\n        {celsius ? 'F' : 'C'}\n      </Button>\n    </>\n  );\n};\n\nexport default ThemeSwitch;\n","import AccuWeatherAPI from '../../api/AccuWeatherAPI';\nimport { FC, KeyboardEvent, useRef } from 'react';\nimport { Box, Button, TextField } from '@material-ui/core';\nimport { useAppDispatch } from '../../hooks/hooks';\nimport { WeatherActionCode } from '../../store/reducers/weatherReducer';\n\nconst Search: FC = () => {\n  const textFieldRef = useRef<HTMLInputElement>();\n  const dispatch = useAppDispatch();\n  const onSearch = () => {\n    if (textFieldRef.current.value === '')\n      dispatch({ type: WeatherActionCode.RETURN });\n    else\n      AccuWeatherAPI.getAutocompleteSearch(textFieldRef.current.value).then(\n        (values) => {\n          dispatch({\n            type: WeatherActionCode.ADD_RESULTS,\n            payload: { results: values },\n          });\n        }\n      );\n  };\n  const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.code === 'Enter') onSearch();\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      width=\"40%\"\n      margin=\"2em\"\n      justifyContent=\"space-around\"\n      alignItems=\"center\"\n    >\n      <TextField\n        fullWidth\n        type=\"search\"\n        inputRef={textFieldRef}\n        onKeyPress={onKeyPress}\n      />\n      <Button onClick={onSearch}>Search</Button>\n    </Box>\n  );\n};\n\nexport default Search;\n","import AccuWeatherAPI, {\n  LocationInfoResponse,\n} from '../../../api/AccuWeatherAPI';\nimport { WeatherActionCode } from '../../../store/reducers/weatherReducer';\nimport { FC } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../../hooks/hooks';\nimport {\n  Card,\n  CardActionArea,\n  CardContent,\n  Grid,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\n\nconst ResultsDisplay: FC = () => {\n  const results = useAppSelector((state) => state.weather.searchResults);\n  const dispatch = useAppDispatch();\n  const theme = useTheme();\n  const largeScreenBreakpoint = useMediaQuery(theme.breakpoints.up('lg'));\n\n  const onCardSelected = (selected: LocationInfoResponse) => {\n    const key = selected.Key;\n    AccuWeatherAPI.getCombinedDataCallback(\n      key,\n      ([conditions, info, fiveDayForecast]) => {\n        dispatch({ type: WeatherActionCode.RETURN });\n        dispatch({\n          type: WeatherActionCode.CHANGE_CURRENT,\n          payload: { current: { conditions, info, fiveDayForecast } },\n        });\n      }\n    );\n  };\n\n  return (\n    <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n      {results.map((info, index) => (\n        <Grid\n          style={{ margin: '1em', textAlign: 'center' }}\n          item\n          key={index}\n          xs={12}\n          lg={2}\n        >\n          <Card\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <CardActionArea\n              style={{ minHeight: largeScreenBreakpoint ? '20vh' : '10vh' }}\n              onClick={() => onCardSelected(info)}\n            >\n              <CardContent>\n                <Typography>\n                  {info.LocalizedName}, {info.AdministrativeArea.LocalizedName},{' '}\n                  {info.Country.LocalizedName}\n                </Typography>\n              </CardContent>\n            </CardActionArea>\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default ResultsDisplay;\n","import AccuWeatherAPI, {\n  CurrentConditionsResponse,\n  LocationInfoResponse,\n} from '../../../../api/AccuWeatherAPI';\nimport { FC } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport { useAppSelector } from '../../../../hooks/hooks';\n\ninterface WeatherSummaryProps {\n  conditions: CurrentConditionsResponse;\n  info: LocationInfoResponse;\n}\n\nconst WeatherSummary: FC<WeatherSummaryProps> = ({ conditions, info }) => {\n  const { WeatherIcon, Temperature } = conditions;\n  const { LocalizedName } = info;\n  const celsius = useAppSelector((state) => state.weather.celsius);\n  const temperature = Temperature[celsius ? 'Metric' : 'Imperial'].Value;\n  return (\n    <Box\n      display=\"flex\"\n      width=\"30vw\"\n      alignItems=\"center\"\n      color=\"background.main\"\n      style={{ margin: '2em' }}\n    >\n      <div>\n        <img\n          src={AccuWeatherAPI.getImageUrl(WeatherIcon)}\n          alt=\"weather-summary-icon\"\n        />\n      </div>\n      <Box>\n        <Typography variant=\"h5\" color=\"textPrimary\">\n          {LocalizedName}\n        </Typography>\n        <Typography variant=\"h5\" color=\"textPrimary\">\n          {temperature}° {celsius ? 'C' : 'F'}\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default WeatherSummary;\n","import { FC } from 'react';\nimport { HeartFill, Heart } from 'react-bootstrap-icons';\nimport { Box, Button, withStyles } from '@material-ui/core';\nimport { LocationInfoResponse } from '../../../../api/AccuWeatherAPI';\nimport { WeatherActionCode } from '../../../../store/reducers/weatherReducer';\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/hooks';\nimport { red } from '@material-ui/core/colors';\n\ninterface AddToFavoritesWidgetProps {\n  info: LocationInfoResponse;\n}\n\nconst ColorButton = withStyles(() => ({\n  root: {\n    color: red[500],\n  },\n}))(Button);\n\nconst AddToFavoritesWidget: FC<AddToFavoritesWidgetProps> = ({ info }) => {\n  const { Key } = info;\n  const dispatch = useAppDispatch();\n  const favorites = useAppSelector((state) => state.weather.favorites);\n  const isFavorited = favorites.includes(Key);\n\n  const onAddToFavoritesClick = () => {\n    dispatch({\n      type: isFavorited\n        ? WeatherActionCode.REMOVE_FAVORITE\n        : WeatherActionCode.ADD_FAVORITE,\n      payload: { key: Key },\n    });\n  };\n\n  return (\n    <Box\n      color=\"primary.main\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-around\"\n    >\n      <ColorButton onClick={onAddToFavoritesClick}>\n        {isFavorited ? <HeartFill size={50} /> : <Heart size={50} />}\n      </ColorButton>\n    </Box>\n  );\n};\n\nexport default AddToFavoritesWidget;\n","import AccuWeatherAPI, {\n  FiveDayForecastResponse,\n} from '../../../../api/AccuWeatherAPI';\nimport { FC } from 'react';\nimport {\n  Card,\n  CardActionArea,\n  CardContent,\n  Grid,\n  Typography,\n} from '@material-ui/core';\nimport { useAppSelector } from '../../../../hooks/hooks';\n\ninterface FiveDayForecastWidgetProps {\n  forecast: FiveDayForecastResponse;\n}\n\nconst FiveDayForecastWidget: FC<FiveDayForecastWidgetProps> = ({\n  forecast,\n}) => {\n  const celsius = useAppSelector((state) => state.weather.celsius);\n  const getDayFromEpoch = (epochTime: number): string => {\n    const days = [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n    ];\n    return days[new Date(epochTime * 1000).getDay()];\n  };\n  const getTemperatureRange = (\n    min: { Value: number; Unit: 'F' | 'C' },\n    max: { Value: number; Unit: 'F' | 'C' }\n  ): string => {\n    const unit = min.Unit;\n    const apiUnit = unit === 'C';\n    if (apiUnit === celsius) return `${min.Value}°-${max.Value}° ${unit}`;\n    if (min.Unit === 'F')\n      return `${Math.round((min.Value - 30) / 2)}°-${Math.round(\n        (max.Value - 30) / 2\n      )}° C`;\n    return `${Math.round(min.Value * 2 + 30)}°-${Math.round(\n      max.Value * 2 + 30\n    )}° F`;\n  };\n\n  return (\n    <Grid direction=\"row\" justifyContent=\"center\" container>\n      {forecast.DailyForecasts.map((forecast, index) => {\n        const max = forecast.Temperature.Maximum;\n        const min = forecast.Temperature.Minimum;\n        return (\n          <Grid style={{ margin: '2em', minWidth: '20em' }} item key={index}>\n            <Card>\n              <CardActionArea>\n                <CardContent style={{ textAlign: 'center' }}>\n                  <Typography variant=\"h6\">\n                    {getDayFromEpoch(forecast.EpochDate)}\n                  </Typography>\n                  <div>\n                    <Typography>Day</Typography>\n                    <img\n                      src={AccuWeatherAPI.getImageUrl(forecast.Day.Icon)}\n                      alt=\"day-weather-icon\"\n                    />\n                  </div>\n                  <Typography>Range {getTemperatureRange(min, max)}</Typography>\n                  <div>\n                    <img\n                      src={AccuWeatherAPI.getImageUrl(forecast.Night.Icon)}\n                      alt=\"night-weather-icon\"\n                    />\n                    <Typography>Night</Typography>\n                  </div>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport default FiveDayForecastWidget;\n","import WeatherSummary from './WeatherSummary';\nimport AddToFavoritesWidget from './AddToFavoritesWidget';\nimport FiveDayForecastWidget from './FiveDayForecastWidget';\nimport { FC, memo } from 'react';\nimport { useAppSelector } from '../../../../hooks/hooks';\nimport { Box, Typography, useMediaQuery, useTheme } from '@material-ui/core';\n\nconst WeatherDisplay: FC = () => {\n  const current = useAppSelector((state) => state.weather.current);\n  const { conditions, info, fiveDayForecast } = current;\n  const theme = useTheme();\n  const mediumScreenBreakpoint = useMediaQuery(theme.breakpoints.up('md'));\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      {current && (\n        <>\n          <Box\n            display=\"flex\"\n            width=\"80%\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n          >\n            <WeatherSummary conditions={conditions} info={info} />\n            <AddToFavoritesWidget info={info} />\n          </Box>\n          <Box style={{ margin: '0 auto' }} color=\"primary.main\">\n            <Typography\n              variant=\"h2\"\n              color=\"textPrimary\"\n              style={{ fontSize: mediumScreenBreakpoint ? '4em' : '3em' }}\n            >\n              {current.conditions.WeatherText}\n            </Typography>\n          </Box>\n          <FiveDayForecastWidget forecast={fiveDayForecast} />\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default memo(WeatherDisplay);\n","import ResultsDisplay from './ResultsDisplay';\nimport WeatherDisplay from './WeatherDisplay/WeatherDisplay';\nimport { FC } from 'react';\nimport { useAppSelector } from '../../../hooks/hooks';\nimport { Box } from '@material-ui/core';\n\nconst MainDisplay: FC = () => {\n  const results = useAppSelector((state) => state.weather.searchResults);\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      width=\"100%\"\n      minHeight=\"75vh\"\n      bgcolor=\"background.default\"\n    >\n      {results.length ? <ResultsDisplay /> : <WeatherDisplay />}\n    </Box>\n  );\n};\n\nexport default MainDisplay;\n","import AccuWeatherAPI from '../api/AccuWeatherAPI';\nimport { FC } from 'react';\nimport { Box, Typography } from '@material-ui/core';\n\nconst ErrorDisplay: FC = () => {\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      flexDirection=\"column\"\n      width=\"100%\"\n      minHeight=\"75vh\"\n      bgcolor=\"background.default\"\n    >\n      <Typography variant=\"h3\">\n        Whoops seems like we have encountered an issue!\n      </Typography>\n      <Typography variant=\"h3\">Here's the last known error:</Typography>\n      <Typography variant=\"h3\" style={{ color: 'red' }}>\n        {AccuWeatherAPI.getLatestErrorMessage()}\n      </Typography>\n    </Box>\n  );\n};\n\nexport default ErrorDisplay;\n","import Search from '../components/Home/Search';\nimport MainDisplay from '../components/Home/MainDisplay/MainDisplay';\nimport ErrorDisplay from '../components/ErrorDisplay';\nimport AccuWeatherAPI from '../api/AccuWeatherAPI';\nimport useAsyncEffect from 'use-async-effect';\nimport { FC, useState } from 'react';\nimport {\n  getCurrentPositionKey,\n  WeatherActionCode,\n} from '../store/reducers/weatherReducer';\nimport { useAppDispatch } from '../hooks/hooks';\n\nconst Home: FC = () => {\n  const dispatch = useAppDispatch();\n  const [mount, setMount] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n  useAsyncEffect(async () => {\n    const key = await getCurrentPositionKey();\n    AccuWeatherAPI.getCombinedDataCallback(\n      key,\n      ([conditions, info, fiveDayForecast]) => {\n        dispatch({\n          type: WeatherActionCode.CHANGE_CURRENT,\n          payload: { current: { info, conditions, fiveDayForecast } },\n        });\n        setMount(true);\n      },\n      () => setError(true)\n    );\n  }, []);\n\n  return (\n    <>\n      <Search />\n      {mount && <MainDisplay />}\n      {error && <ErrorDisplay />}\n    </>\n  );\n};\n\nexport default Home;\n","import AccuWeatherAPI, { CombinedData } from '../../api/AccuWeatherAPI';\nimport routes from '../../routes/routes';\nimport { FC } from 'react';\nimport { WeatherActionCode } from '../../store/reducers/weatherReducer';\nimport {\n  Card,\n  Box,\n  CardActionArea,\n  CardContent,\n  Grid,\n  Typography,\n} from '@material-ui/core';\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\nimport { useHistory } from 'react-router-dom';\n\ninterface FavoritesGridProps {\n  combinedDataArray: CombinedData[];\n}\n\nconst FavoritesGrid: FC<FavoritesGridProps> = ({ combinedDataArray }) => {\n  const celsius = useAppSelector((state) => state.weather.celsius);\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n\n  const onCardClick = (combinedData: CombinedData) => {\n    const [conditions, info, fiveDayForecast] = combinedData;\n    dispatch({\n      type: WeatherActionCode.CHANGE_CURRENT,\n      payload: { current: { conditions, info, fiveDayForecast } },\n    });\n    history.push(routes.home.to);\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      width=\"100%\"\n      minHeight=\"72vh\"\n      bgcolor=\"background.default\"\n    >\n      <Grid\n        style={{ width: '90%' }}\n        direction=\"row\"\n        justifyContent=\"center\"\n        container\n      >\n        {combinedDataArray.map((combinedData, index) => {\n          const [conditions, info] = combinedData;\n          const temperature = celsius\n            ? conditions.Temperature.Metric.Value\n            : conditions.Temperature.Imperial.Value;\n          const unit = celsius ? 'C' : 'F';\n          return (\n            <Grid style={{ margin: '2em', minWidth: '20em' }} item key={index}>\n              <Card>\n                <CardActionArea onClick={() => onCardClick(combinedData)}>\n                  <CardContent style={{ textAlign: 'center' }}>\n                    <Typography>{info.LocalizedName}</Typography>\n                    <Typography>\n                      {temperature}° {unit}\n                    </Typography>\n                    <div>\n                      <img\n                        src={AccuWeatherAPI.getImageUrl(conditions.WeatherIcon)}\n                        alt={`favorites-weather-icon-${index}`}\n                      />\n                    </div>\n                    <Typography>{conditions.WeatherText}</Typography>\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default FavoritesGrid;\n","import Home from '../pages/Home';\nimport Favorites from '../pages/Favorites';\n\nconst routes = {\n  home: {\n    name: 'Home',\n    to: '/',\n    component: Home,\n  },\n  favorites: {\n    name: 'Favorites',\n    to: '/favorites',\n    component: Favorites,\n  },\n};\n\nexport default routes;\n","import useAsyncEffect from 'use-async-effect';\nimport AccuWeatherAPI, { CombinedData } from '../api/AccuWeatherAPI';\nimport FavoritesGrid from '../components/Favorites/FavoritesGrid';\nimport { FC, useState } from 'react';\nimport { useAppSelector } from '../hooks/hooks';\nimport { Typography, useMediaQuery, useTheme } from '@material-ui/core';\n\nconst Favorites: FC = () => {\n  const favorites = useAppSelector((state) => state.weather.favorites);\n  const [combinedData, setCombinedData] = useState<CombinedData[]>([]);\n  const [mount, setMount] = useState<boolean>(false);\n  const theme = useTheme();\n  const mediumScreenBreakpoint = useMediaQuery(theme.breakpoints.up('md'));\n\n  useAsyncEffect(async () => {\n    const combinedDataArray = await Promise.all(\n      favorites.map(\n        async (key: string) => await AccuWeatherAPI.getCombinedData(key)\n      )\n    );\n    setCombinedData(combinedDataArray);\n    setMount(true);\n    return () => setMount(false);\n  }, []);\n\n  return (\n    <>\n      <Typography\n        variant=\"h2\"\n        style={{\n          margin: '1em',\n          fontSize: mediumScreenBreakpoint ? '4em' : '3em',\n        }}\n        color=\"textPrimary\"\n      >\n        Your Favorite Locations\n      </Typography>\n      {mount && <FavoritesGrid combinedDataArray={combinedData} />}\n    </>\n  );\n};\n\nexport default Favorites;\n","import Switches from './ThemeSwitch';\nimport routes from '../routes/routes';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { FC, memo } from 'react';\nimport { Box, Hidden, Link } from '@material-ui/core';\n\nconst Links: FC = () => {\n  return (\n    <Box\n      display=\"flex\"\n      alignItems=\"center\"\n      width=\"30vw\"\n      justifyContent=\"flex-end\"\n      color=\"primary.main\"\n    >\n      {Object.values(routes).map((route, index) => (\n        <Link\n          key={index}\n          style={{ margin: '1em', minWidth: '4em' }}\n          color=\"textPrimary\"\n          component={RouterLink}\n          to={route.to}\n        >\n          {route.name}\n        </Link>\n      ))}\n      <Hidden smDown>\n        <Switches />\n      </Hidden>\n    </Box>\n  );\n};\n\nexport default memo(Links);\n","import Links from '../Links';\nimport { FC, memo } from 'react';\nimport { Box, Typography } from '@material-ui/core';\n\nconst Navbar: FC = () => {\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      bgcolor=\"primary.main\"\n    >\n      <Typography\n        variant=\"h5\"\n        style={{ marginLeft: '2em', fontStyle: 'italic' }}\n      >\n        Weather App\n      </Typography>\n      <Links />\n    </Box>\n  );\n};\n\nexport default memo(Navbar);\n","import routes from '../routes/routes';\nimport { FC } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nconst Routes: FC = () => {\n  return (\n    <Switch>\n      {Object.values(routes).map((route, index) => (\n        <Route key={index} path={route.to} exact component={route.component} />\n      ))}\n    </Switch>\n  );\n};\n\nexport default Routes;\n","import Routes from '../pages/Routes';\nimport { FC } from 'react';\nimport { Box } from '@material-ui/core';\n\nconst Content: FC = () => {\n  return (\n    <Box display=\"flex\" alignItems=\"center\" flexDirection=\"column\">\n      <Routes />\n    </Box>\n  );\n};\n\nexport default Content;\n","import Navbar from '../components/Navbar/Navbar';\nimport Content from '../components/Content';\nimport { FC } from 'react';\n\nconst Main: FC = () => {\n  return (\n    <>\n      <Navbar />\n      <Content />\n    </>\n  );\n};\n\nexport default Main;\n","import ReactDOM from 'react-dom';\nimport StoreProvider from './store/StoreProvider';\nimport ThemeProvider from './style/ThemeProvider';\nimport Main from './pages/Main';\nimport { FC } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst App: FC = () => {\n  return (\n    <StoreProvider>\n      <ThemeProvider>\n        <Router>\n          <Main />\n        </Router>\n      </ThemeProvider>\n    </StoreProvider>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}