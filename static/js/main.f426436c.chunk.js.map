{"version":3,"sources":["store/reducers/themeReducer.ts","store/reducers/rootReducer.ts","store/StoreProvider.tsx","hooks/hooks.tsx","components/WeatherApp.tsx","style/ThemeProvider.tsx","index.tsx"],"names":["ThemeActionCode","initialState","dark","window","matchMedia","matches","theme","state","action","type","TOGGLE","rootReducer","combineReducers","store","createStore","StoreProvider","children","useAppSelector","useSelector","WeatherApp","dispatch","useDispatch","Button","color","variant","onClick","ThemeProvider","darkMode","darkThemeEnabled","createTheme","palette","primary","light","main","contrastText","secondary","CssBaseline","Box","width","height","bgcolor","App","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"4GAMYA,E,mDAAAA,K,4BAAAA,M,KAQZ,IAAMC,EAA2B,CAC/BC,OAIIC,OAAOC,YACFD,OAAOC,WAAW,gCAAgCC,SAI7D,IAYeC,EAZiC,WAG1C,IAFJC,EAEG,uDAFiBN,EACpBO,EACG,uCACH,OAAQA,EAAOC,MACb,KAAKT,EAAgBU,OACnB,OAAO,2BAAKH,GAAZ,IAAmBL,MAAOK,EAAML,OAClC,QACE,OAAOK,I,QC5BEI,EADKC,YAAgB,CAAEN,U,eCEhCO,EAAQC,YACZH,EACA,GACCR,OAAD,8BACGA,OAAD,gCAQWY,EANW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3B,OAAO,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SAAyBG,K,QCRrBC,EAAkDC,ICgBhDC,EAhBI,WACjB,IAAMC,EDF4BC,cCIlC,OACE,cAACC,EAAA,EAAD,CACEC,MAAM,UACNC,QAAQ,YACRC,QAAS,WACPL,EAAS,CAAEX,KAAMT,EAAgBU,UAJrC,qB,gCCiBJ,IAkBegB,EAlBW,SAAC,GAAkB,IApB9BC,EAoBcX,EAAe,EAAfA,SACrBY,EAAmBX,GAAe,SAACV,GAAD,OAAWA,EAAMD,MAAMJ,QAC/D,OACE,cAAC,IAAD,CAAkBI,OAvBPqB,EAuBoBC,EAtB1BC,YAAY,CACjBC,QAAS,CACPrB,KAAMkB,EAAW,OAAS,QAC1BI,QAAS,CACPC,MAAO,UACPC,KAAM,UACN/B,KAAM,UACNgC,aAAc,QAEhBC,UAAW,CACTH,MAAO,UACPC,KAAM,UACN/B,KAAM,UACNgC,aAAc,YASlB,SACE,cAACE,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,MAAM,QACNC,OAAO,QACPhB,MAAM,eACNiB,QAAQ,mBAJV,SAMGxB,SC9BLyB,EAAU,WACd,OACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,WAOVC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f426436c.chunk.js","sourcesContent":["import { AnyAction, Reducer } from 'redux';\n\ninterface ThemeState {\n  dark: boolean;\n}\n\nexport enum ThemeActionCode {\n  TOGGLE = 'TOGGLE_DARK_THEME',\n}\n\ninterface ThemeAction extends AnyAction {\n  type: ThemeActionCode;\n}\n\nconst initialState: ThemeState = {\n  dark: isBrowserDarkMode(),\n};\n\nfunction isBrowserDarkMode(): boolean {\n  if (window.matchMedia)\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\n  return false;\n}\n\nconst theme: Reducer<ThemeState, ThemeAction> = (\n  state: ThemeState = initialState,\n  action: ThemeAction\n) => {\n  switch (action.type) {\n    case ThemeActionCode.TOGGLE:\n      return { ...state, dark: !state.dark };\n    default:\n      return state;\n  }\n};\n\nexport default theme;\n","import theme from './themeReducer';\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({ theme });\nexport default rootReducer;\n","import rootReducer from './reducers/rootReducer';\nimport { createStore } from 'redux';\nimport { FC } from 'react';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n  rootReducer,\n  {},\n  (window as any)['__REDUX_DEVTOOLS_EXTENSION__'] &&\n    (window as any)['__REDUX_DEVTOOLS_EXTENSION__']()\n);\nconst StoreProvider: FC = ({ children }) => {\n  return <Provider store={store}>{children}</Provider>;\n};\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport default StoreProvider;\n","import { AppDispatch, RootState } from '../store/StoreProvider';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Button } from '@material-ui/core';\nimport { useAppDispatch } from '../hooks/hooks';\nimport { ThemeActionCode } from '../store/reducers/themeReducer';\n\nconst WeatherApp = () => {\n  const dispatch = useAppDispatch();\n\n  return (\n    <Button\n      color=\"primary\"\n      variant=\"contained\"\n      onClick={() => {\n        dispatch({ type: ThemeActionCode.TOGGLE });\n      }}\n    >\n      Toggle\n    </Button>\n  );\n};\n\nexport default WeatherApp;\n","import { FC } from 'react';\nimport { useAppSelector } from '../hooks/hooks';\nimport { Box, createTheme, CssBaseline } from '@material-ui/core';\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/styles';\n\nfunction theme(darkMode: boolean) {\n  return createTheme({\n    palette: {\n      type: darkMode ? 'dark' : 'light',\n      primary: {\n        light: '#757ce8',\n        main: '#3f50b5',\n        dark: '#002884',\n        contrastText: '#fff',\n      },\n      secondary: {\n        light: '#ff7961',\n        main: '#f44336',\n        dark: '#ba000d',\n        contrastText: '#000',\n      },\n    },\n  });\n}\n\nconst ThemeProvider: FC = ({ children }) => {\n  const darkThemeEnabled = useAppSelector((state) => state.theme.dark);\n  return (\n    <MuiThemeProvider theme={theme(darkThemeEnabled)}>\n      <CssBaseline>\n        <Box\n          width=\"100vw\"\n          height=\"100vh\"\n          color=\"primary.main\"\n          bgcolor=\"background.paper\"\n        >\n          {children}\n        </Box>\n      </CssBaseline>\n    </MuiThemeProvider>\n  );\n};\n\nexport default ThemeProvider;\n","import React, { FC } from 'react';\nimport ReactDOM from 'react-dom';\nimport StoreProvider from './store/StoreProvider';\nimport WeatherApp from './components/WeatherApp';\nimport ThemeProvider from './style/ThemeProvider';\n\nconst App: FC = () => {\n  return (\n    <React.StrictMode>\n      <StoreProvider>\n        <ThemeProvider>\n          <WeatherApp />\n        </ThemeProvider>\n      </StoreProvider>\n    </React.StrictMode>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}