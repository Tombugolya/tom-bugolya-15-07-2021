{"version":3,"sources":["store/reducers/themeReducer.ts","api/AccuWeatherAPI.ts","store/reducers/weatherReducer.ts","store/reducers/rootReducer.ts","store/StoreProvider.tsx","localStorage/localStorage.ts","hooks/hooks.tsx","style/ThemeProvider.tsx","components/ThemeSwitch.tsx","components/Home/Search.tsx","components/Home/MainDisplay/ResultsDisplay.tsx","components/Home/MainDisplay/WeatherDisplay/WeatherSummary.tsx","components/Home/MainDisplay/WeatherDisplay/AddToFavoritesWidget.tsx","components/Home/MainDisplay/WeatherDisplay/FiveDayForecastWidget.tsx","components/Home/MainDisplay/WeatherDisplay/WeatherDisplay.tsx","components/Home/MainDisplay/MainDisplay.tsx","components/ErrorDisplay.tsx","pages/Home.tsx","components/Favorites/FavoritesGrid.tsx","routes/routes.ts","pages/Favorites.tsx","components/Links.tsx","components/Navbar/Navbar.tsx","pages/Routes.tsx","components/Content.tsx","pages/Main.tsx","routes/Router.tsx","index.tsx"],"names":["ThemeActionCode","initialState","dark","window","matchMedia","matches","EndPoint","toggleTheme","type","TOGGLE","theme","state","action","WeatherActionCode","process","method","endPoint","query","key","queryParams","URLSearchParams","apikey","this","toString","response","fetch","to","error","data","ok","statusText","Error","CURRENT_CONDITIONS","json","q","request","AUTOCOMPLETE","FIVE_DAY_FORECAST","latitude","longitude","GEOPOSITION","GET_INFO_BY_KEY","id","Promise","all","getCurrentConditions","getLocationInfoByKey","getFiveDayForecast","callback","onError","console","log","getCombinedData","then","catch","celsius","favorites","current","searchResults","defaultKey","getCurrentPositionKey","a","navigator","geolocation","resolve","reject","getCurrentPosition","position","latLon","coords","AccuWeatherAPI","getGeopositionSearch","Key","toggleTemperatureUnit","changeCurrent","CHANGE_CURRENT","payload","returnToMainDisplay","RETURN","weather","ADD_FAVORITE","REMOVE_FAVORITE","filter","ADD_RESULTS","results","rootReducer","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","e","loadState","store","createStore","subscribe","_throttle","stringify","setItem","saveState","getState","StoreProvider","children","useAppDispatch","useDispatch","useAppSelector","useSelector","useMediaQueryBreakpoint","val","useTheme","useMediaQuery","breakpoints","up","ThemeProvider","darkMode","darkThemeEnabled","createTheme","palette","primary","main","contrastText","CssBaseline","Box","maxWidth","minHeight","bgcolor","ThemeSwitch","listItems","dispatch","List","ListItem","button","onClick","ListItemText","size","Button","style","margin","Search","textFieldRef","useRef","mediumScreenBreakpoint","onSearch","value","getAutocompleteSearch","values","display","width","justifyContent","alignItems","TextField","fullWidth","inputRef","onKeyPress","code","ResultsDisplay","largeScreenBreakpoint","Grid","container","direction","map","info","index","textAlign","item","xs","lg","Card","CardActionArea","selected","getCombinedDataCallback","conditions","fiveDayForecast","onCardSelected","CardContent","Typography","LocalizedName","AdministrativeArea","Country","WeatherSummary","WeatherIcon","Temperature","temperature","Value","color","marginTop","marginBottom","src","getImageUrl","alt","variant","ColorButton","withStyles","root","red","AddToFavoritesWidget","isFavorited","includes","addFavorite","FiveDayForecastWidget","forecast","getTemperatureRange","min","max","unit","Unit","Math","round","DailyForecasts","epochTime","Maximum","Minimum","minWidth","EpochDate","Date","getDay","Day","Icon","Night","WeatherDisplay","flexDirection","fontSize","WeatherText","memo","MainDisplay","length","ErrorDisplay","getLatestErrorMessage","Home","useState","mount","setMount","setError","useAsyncEffect","FavoritesGrid","combinedDataArray","history","useHistory","combinedData","Metric","Imperial","push","routes","home","onCardClick","name","component","setCombinedData","Links","drawerState","setDrawerState","toggleDrawer","Object","route","Link","RouterLink","SwipeableDrawer","anchor","onClose","onOpen","open","onKeyDown","Divider","Navbar","marginLeft","fontStyle","Routes","path","exact","Content","Main","Router","basename","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1de23c93.chunk.js","sourcesContent":["import { AnyAction, Reducer } from 'redux';\n\ninterface ThemeState {\n  dark: boolean;\n}\n\nexport enum ThemeActionCode {\n  TOGGLE = 'TOGGLE_DARK_THEME',\n}\n\ninterface ThemeAction extends AnyAction {\n  type: ThemeActionCode;\n}\n\nconst initialState: ThemeState = {\n  dark: isBrowserDarkMode(),\n};\n\nfunction isBrowserDarkMode(): boolean {\n  if (window.matchMedia)\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\n  return false;\n}\n\nexport const toggleTheme = () => {\n  return {\n    type: ThemeActionCode.TOGGLE,\n  };\n};\n\nconst theme: Reducer<ThemeState, ThemeAction> = (\n  state: ThemeState = initialState,\n  action: ThemeAction\n) => {\n  switch (action.type) {\n    case ThemeActionCode.TOGGLE:\n      return { ...state, dark: !state.dark };\n    default:\n      return state;\n  }\n};\n\nexport default theme;\n","import to from 'await-to-js';\n\ninterface LatLon {\n  latitude: number;\n  longitude: number;\n}\n\nexport enum EndPoint {\n  AUTOCOMPLETE = 'locations/v1/cities/autocomplete/',\n  CURRENT_CONDITIONS = 'currentconditions/v1/',\n  FIVE_DAY_FORECAST = 'forecasts/v1/daily/5day/',\n  GEOPOSITION = 'locations/v1/cities/geoposition/search/',\n  GET_INFO_BY_KEY = 'locations/v1/',\n}\n\nexport interface LocationInfoResponse {\n  Key: string;\n  LocalizedName: string;\n  Country: { ID: string; LocalizedName: string };\n  AdministrativeArea: { ID: string; LocalizedName: string };\n}\n\nexport interface CurrentConditionsResponse {\n  WeatherText: string;\n  WeatherIcon: number;\n  Temperature: {\n    Metric: {\n      Value: number;\n    };\n    Imperial: {\n      Value: number;\n    };\n  };\n}\n\ninterface SingleForecast {\n  EpochDate: number;\n  Temperature: {\n    Minimum: {\n      Value: number;\n      Unit: 'F' | 'C';\n    };\n    Maximum: {\n      Value: number;\n      Unit: 'F' | 'C';\n    };\n  };\n  Day: {\n    Icon: number;\n  };\n  Night: {\n    Icon: number;\n  };\n}\n\nexport interface FiveDayForecastResponse {\n  DailyForecasts: SingleForecast[];\n}\n\ninterface GeopositionResponse {\n  Key: string;\n}\n\nexport type CombinedData = [\n  CurrentConditionsResponse,\n  LocationInfoResponse,\n  FiveDayForecastResponse\n];\n\ninterface RequestParameters {\n  endPoint: EndPoint;\n  query?: Partial<{ q: string }>;\n  key?: string;\n}\n\nclass AccuWeatherApi {\n  readonly #url: string = 'https://dataservice.accuweather.com/';\n  readonly #apiKey: string = `${process.env.REACT_APP_WEATHER_API_KEY}`;\n  readonly #assetsUrl: string =\n    'https://herolo-assets.s3.us-east-2.amazonaws.com/images/';\n  readonly #headers = {\n    method: 'GET',\n  };\n  #latestError: string;\n\n  public async request<T>({\n    endPoint,\n    query = {},\n    key = '',\n  }: RequestParameters): Promise<T> {\n    const queryParams = new URLSearchParams({\n      apikey: this.#apiKey,\n      ...query,\n    }).toString();\n    const response = fetch(\n      `${this.#url}${endPoint}${key}?${queryParams}`,\n      this.#headers\n    );\n    const [error, data] = await to(response);\n    if (error || !data.ok) {\n      this.#latestError = `Failed due to: ${error || data.statusText}`;\n      throw new Error(`Failed due to: ${error || data.statusText}`);\n    }\n    if (endPoint === EndPoint.CURRENT_CONDITIONS)\n      return (await data.json())[0] as Promise<T>;\n    return (await data.json()) as Promise<T>;\n  }\n\n  public async getAutocompleteSearch(\n    q: string\n  ): Promise<LocationInfoResponse[]> {\n    return await this.request<LocationInfoResponse[]>({\n      endPoint: EndPoint.AUTOCOMPLETE,\n      query: { q },\n    });\n  }\n\n  public async getCurrentConditions(\n    key: string\n  ): Promise<CurrentConditionsResponse> {\n    return await this.request<CurrentConditionsResponse>({\n      endPoint: EndPoint.CURRENT_CONDITIONS,\n      key,\n    });\n  }\n\n  public async getFiveDayForecast(\n    key: string\n  ): Promise<FiveDayForecastResponse> {\n    return await this.request<FiveDayForecastResponse>({\n      endPoint: EndPoint.FIVE_DAY_FORECAST,\n      key,\n    });\n  }\n\n  public async getGeopositionSearch({\n    latitude,\n    longitude,\n  }: LatLon): Promise<GeopositionResponse> {\n    return await this.request<GeopositionResponse>({\n      endPoint: EndPoint.GEOPOSITION,\n      query: {\n        q: `${latitude},${longitude}`,\n      },\n    });\n  }\n\n  public async getLocationInfoByKey(\n    key: string\n  ): Promise<LocationInfoResponse> {\n    return await this.request<LocationInfoResponse>({\n      endPoint: EndPoint.GET_INFO_BY_KEY,\n      key,\n    });\n  }\n\n  public getImageUrl(id: number): string {\n    return `${this.#assetsUrl}${id}-s.png`;\n  }\n\n  public async getCombinedData(key: string): Promise<CombinedData> {\n    return Promise.all([\n      this.getCurrentConditions(key),\n      this.getLocationInfoByKey(key),\n      this.getFiveDayForecast(key),\n    ]);\n  }\n\n  public getCombinedDataCallback(\n    key: string,\n    callback: (combinedData: CombinedData) => void,\n    onError: (e: any) => void = console.log\n  ): void {\n    this.getCombinedData(key).then(callback).catch(onError);\n  }\n\n  public getLatestErrorMessage(): string {\n    return this.#latestError;\n  }\n}\n\nexport default new AccuWeatherApi();\n","import AccuWeatherAPI, {\n  LocationInfoResponse,\n  CurrentConditionsResponse,\n  FiveDayForecastResponse,\n} from '../../api/AccuWeatherAPI';\nimport { AnyAction, Reducer } from 'redux';\nimport to from 'await-to-js';\n\ninterface WeatherState {\n  celsius: boolean;\n  favorites: string[];\n  current: {\n    conditions: CurrentConditionsResponse;\n    info: LocationInfoResponse;\n    fiveDayForecast: FiveDayForecastResponse;\n  };\n  searchResults: LocationInfoResponse[];\n}\n\nexport enum WeatherActionCode {\n  TOGGLE = 'TOGGLE_CELSIUS_FAHRENHEIT',\n  ADD_FAVORITE = 'ADD_WEATHER_KEY_TO_FAVORITES',\n  REMOVE_FAVORITE = 'REMOVE_WEATHER_KEY_FROM_FAVORITES',\n  CHANGE_CURRENT = 'CHANGE_CURRENT_WEATHER_KEY',\n  ADD_RESULTS = 'ADD_AUTOCOMPLETE_WEATHER_RESULTS',\n  RETURN = 'RETURN_TO_MAIN_DISPLAY',\n}\n\ninterface CombinedInformation {\n  conditions: CurrentConditionsResponse;\n  info: LocationInfoResponse;\n  fiveDayForecast: FiveDayForecastResponse;\n}\n\ninterface WeatherAction extends AnyAction {\n  type: WeatherActionCode;\n  payload?: {\n    key?: string;\n    results?: LocationInfoResponse[];\n    current?: CombinedInformation;\n  };\n}\n\nconst initialState: WeatherState = {\n  celsius: true,\n  favorites: [],\n  current: null,\n  searchResults: [],\n};\n\nconst defaultKey = '215854';\n\nexport async function getCurrentPositionKey(): Promise<string> {\n  if (navigator && navigator.geolocation) {\n    try {\n      const position = await new Promise(\n        (resolve: (g: GeolocationPosition) => void, reject) => {\n          navigator.geolocation.getCurrentPosition(resolve, reject);\n        }\n      );\n      const latLon = {\n        longitude: position.coords.longitude,\n        latitude: position.coords.latitude,\n      };\n      const [error, data] = await to(\n        AccuWeatherAPI.getGeopositionSearch(latLon)\n      );\n      if (error) return defaultKey;\n      return data!.Key;\n    } catch (e) {\n      return defaultKey;\n    }\n  }\n  return defaultKey;\n}\n\nexport const toggleTemperatureUnit = (): WeatherAction => {\n  return {\n    type: WeatherActionCode.TOGGLE,\n  };\n};\n\nexport const addFavorite = (key: string): WeatherAction => {\n  return {\n    type: WeatherActionCode.ADD_FAVORITE,\n    payload: { key },\n  };\n};\n\nexport const removeFavorite = (key: string): WeatherAction => {\n  return {\n    type: WeatherActionCode.REMOVE_FAVORITE,\n    payload: { key },\n  };\n};\n\nexport const changeCurrent = (current: CombinedInformation): WeatherAction => {\n  return {\n    type: WeatherActionCode.CHANGE_CURRENT,\n    payload: { current },\n  };\n};\n\nexport const addResults = (results: LocationInfoResponse[]): WeatherAction => {\n  return {\n    type: WeatherActionCode.ADD_RESULTS,\n    payload: { results },\n  };\n};\n\nexport const returnToMainDisplay = (): WeatherAction => {\n  return {\n    type: WeatherActionCode.RETURN,\n  };\n};\n\nconst weather: Reducer<WeatherState, WeatherAction> = (\n  state: WeatherState = initialState,\n  action: WeatherAction\n) => {\n  switch (action.type) {\n    case WeatherActionCode.TOGGLE:\n      return { ...state, celsius: !state.celsius };\n    case WeatherActionCode.ADD_FAVORITE:\n      return {\n        ...state,\n        favorites: [...state.favorites, action.payload.key],\n      };\n    case WeatherActionCode.REMOVE_FAVORITE:\n      return {\n        ...state,\n        favorites: state.favorites.filter((key) => key !== action.payload.key),\n      };\n    case WeatherActionCode.CHANGE_CURRENT:\n      return {\n        ...state,\n        current: action.payload.current,\n      };\n    case WeatherActionCode.ADD_RESULTS:\n      return {\n        ...state,\n        searchResults: action.payload.results,\n      };\n    case WeatherActionCode.RETURN:\n      return {\n        ...state,\n        searchResults: [],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default weather;\n","import theme from './themeReducer';\nimport weather from './weatherReducer';\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({ theme, weather });\nexport default rootReducer;\n","import rootReducer from './reducers/rootReducer';\nimport _throttle from 'lodash/throttle';\nimport { createStore } from 'redux';\nimport { FC } from 'react';\nimport { Provider } from 'react-redux';\nimport { loadState, saveState } from '../localStorage/localStorage';\n\nconst persistedState = loadState();\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  (window as any)['__REDUX_DEVTOOLS_EXTENSION__'] &&\n    (window as any)['__REDUX_DEVTOOLS_EXTENSION__']()\n);\nstore.subscribe(\n  _throttle(() => {\n    saveState(store.getState());\n  }, 1000)\n);\n\nconst StoreProvider: FC = ({ children }) => {\n  return <Provider store={store}>{children}</Provider>;\n};\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport default StoreProvider;\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) return undefined;\n    return JSON.parse(serializedState);\n  } catch (e) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: any) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (e) {\n    throw new Error(`Couldn't save to local storage, due to: ${e}`);\n  }\n};\n","import { AppDispatch, RootState } from '../store/StoreProvider';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport { useMediaQuery, useTheme } from '@material-ui/core';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport const useMediaQueryBreakpoint = (val: Breakpoint) => {\n  const theme = useTheme();\n  return useMediaQuery(theme.breakpoints.up(val));\n};\n","import { FC } from 'react';\nimport { useAppSelector } from '../hooks/hooks';\nimport { Box, createTheme, CssBaseline } from '@material-ui/core';\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/styles';\n\nfunction theme(darkMode: boolean) {\n  return createTheme({\n    palette: {\n      type: darkMode ? 'dark' : 'light',\n      primary: {\n        main: '#606CA8',\n        contrastText: '#fff',\n      },\n    },\n  });\n}\n\nconst ThemeProvider: FC = ({ children }) => {\n  const darkThemeEnabled = useAppSelector((state) => state.theme.dark);\n  return (\n    <MuiThemeProvider theme={theme(darkThemeEnabled)}>\n      <CssBaseline>\n        <Box maxWidth=\"100vw\" minHeight=\"100vh\" bgcolor=\"background.paper\">\n          {children}\n        </Box>\n      </CssBaseline>\n    </MuiThemeProvider>\n  );\n};\n\nexport default ThemeProvider;\n","import { toggleTheme } from '../store/reducers/themeReducer';\nimport { toggleTemperatureUnit } from '../store/reducers/weatherReducer';\nimport { useAppDispatch, useAppSelector } from '../hooks/hooks';\nimport { Button, List, ListItem, ListItemText } from '@material-ui/core';\nimport { MoonFill, SunFill } from 'react-bootstrap-icons';\nimport { FC } from 'react';\n\ninterface ThemeSwitchProps {\n  listItems?: boolean;\n}\n\nconst ThemeSwitch: FC<ThemeSwitchProps> = ({ listItems = false }) => {\n  const dispatch = useAppDispatch();\n  const darkThemeEnabled = useAppSelector((state) => state.theme.dark);\n  const celsius = useAppSelector((state) => state.weather.celsius);\n\n  return !listItems ? (\n    <>\n      <Button style={{ margin: '1em' }} onClick={() => dispatch(toggleTheme())}>\n        {darkThemeEnabled ? <SunFill size={15} /> : <MoonFill size={15} />}\n      </Button>\n      <Button\n        style={{ margin: '1em' }}\n        onClick={() => dispatch(toggleTemperatureUnit())}\n      >\n        {celsius ? 'F' : 'C'}\n      </Button>\n    </>\n  ) : (\n    <>\n      <List>\n        <ListItem button onClick={() => dispatch(toggleTheme())}>\n          <ListItemText>\n            {darkThemeEnabled ? <SunFill size={15} /> : <MoonFill size={15} />}\n          </ListItemText>\n        </ListItem>\n      </List>\n      <List>\n        <ListItem button onClick={() => dispatch(toggleTemperatureUnit())}>\n          <ListItemText>{celsius ? 'F' : 'C'}</ListItemText>\n        </ListItem>\n      </List>\n    </>\n  );\n};\n\nexport default ThemeSwitch;\n","import AccuWeatherAPI from '../../api/AccuWeatherAPI';\nimport {\n  addResults,\n  returnToMainDisplay,\n} from '../../store/reducers/weatherReducer';\nimport { FC, KeyboardEvent, useRef } from 'react';\nimport { Box, Button, TextField } from '@material-ui/core';\nimport { useAppDispatch, useMediaQueryBreakpoint } from '../../hooks/hooks';\n\nconst Search: FC = () => {\n  const textFieldRef = useRef<HTMLInputElement>();\n  const dispatch = useAppDispatch();\n  const mediumScreenBreakpoint = useMediaQueryBreakpoint('md');\n\n  const onSearch = () => {\n    if (textFieldRef.current.value === '') dispatch(returnToMainDisplay());\n    else\n      AccuWeatherAPI.getAutocompleteSearch(textFieldRef.current.value).then(\n        (values) => dispatch(addResults(values))\n      );\n  };\n  const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.code === 'Enter') onSearch();\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      width={mediumScreenBreakpoint ? '40%' : '60%'}\n      margin=\"2em\"\n      justifyContent=\"space-around\"\n      alignItems=\"center\"\n    >\n      <TextField\n        fullWidth\n        type=\"search\"\n        inputRef={textFieldRef}\n        onKeyPress={onKeyPress}\n      />\n      <Button onClick={onSearch}>Search</Button>\n    </Box>\n  );\n};\n\nexport default Search;\n","import AccuWeatherAPI, {\n  LocationInfoResponse,\n} from '../../../api/AccuWeatherAPI';\nimport {\n  changeCurrent,\n  returnToMainDisplay,\n} from '../../../store/reducers/weatherReducer';\nimport { FC } from 'react';\nimport {\n  useAppSelector,\n  useAppDispatch,\n  useMediaQueryBreakpoint,\n} from '../../../hooks/hooks';\nimport {\n  CardActionArea,\n  CardContent,\n  Grid,\n  Typography,\n  Card,\n} from '@material-ui/core';\n\nconst ResultsDisplay: FC = () => {\n  const results = useAppSelector((state) => state.weather.searchResults);\n  const dispatch = useAppDispatch();\n  const largeScreenBreakpoint = useMediaQueryBreakpoint('lg');\n\n  const onCardSelected = (selected: LocationInfoResponse) => {\n    const key = selected.Key;\n    AccuWeatherAPI.getCombinedDataCallback(\n      key,\n      ([conditions, info, fiveDayForecast]) => {\n        dispatch(returnToMainDisplay());\n        dispatch(changeCurrent({ conditions, info, fiveDayForecast }));\n      }\n    );\n  };\n\n  return (\n    <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n      {results.map((info, index) => (\n        <Grid\n          style={{ margin: '1em', textAlign: 'center' }}\n          item\n          key={index}\n          xs={12}\n          lg={2}\n        >\n          <Card\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <CardActionArea\n              style={{ minHeight: largeScreenBreakpoint ? '20vh' : '10vh' }}\n              onClick={() => onCardSelected(info)}\n            >\n              <CardContent>\n                <Typography>\n                  {info.LocalizedName}, {info.AdministrativeArea.LocalizedName},{' '}\n                  {info.Country.LocalizedName}\n                </Typography>\n              </CardContent>\n            </CardActionArea>\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default ResultsDisplay;\n","import AccuWeatherAPI, {\n  CurrentConditionsResponse,\n  LocationInfoResponse,\n} from '../../../../api/AccuWeatherAPI';\nimport { FC } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport { useAppSelector } from '../../../../hooks/hooks';\n\ninterface WeatherSummaryProps {\n  conditions: CurrentConditionsResponse;\n  info: LocationInfoResponse;\n}\n\nconst WeatherSummary: FC<WeatherSummaryProps> = ({ conditions, info }) => {\n  const { WeatherIcon, Temperature } = conditions;\n  const { LocalizedName } = info;\n  const celsius = useAppSelector((state) => state.weather.celsius);\n  const temperature = Temperature[celsius ? 'Metric' : 'Imperial'].Value;\n  return (\n    <Box\n      display=\"flex\"\n      alignItems=\"center\"\n      color=\"background.main\"\n      style={{ marginTop: '2em', marginBottom: '2em' }}\n    >\n      <div>\n        <img\n          src={AccuWeatherAPI.getImageUrl(WeatherIcon)}\n          alt=\"weather-summary-icon\"\n        />\n      </div>\n      <Box>\n        <Typography variant=\"h5\" color=\"textPrimary\">\n          {LocalizedName}\n        </Typography>\n        <Typography variant=\"h5\" color=\"textPrimary\">\n          {temperature}° {celsius ? 'C' : 'F'}\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default WeatherSummary;\n","import { FC } from 'react';\nimport { HeartFill, Heart } from 'react-bootstrap-icons';\nimport { Box, Button, withStyles } from '@material-ui/core';\nimport { LocationInfoResponse } from '../../../../api/AccuWeatherAPI';\nimport {\n  addFavorite,\n  removeFavorite,\n} from '../../../../store/reducers/weatherReducer';\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/hooks';\nimport { red } from '@material-ui/core/colors';\n\ninterface AddToFavoritesWidgetProps {\n  info: LocationInfoResponse;\n}\n\nconst ColorButton = withStyles(() => ({\n  root: {\n    color: red[500],\n  },\n}))(Button);\n\nconst AddToFavoritesWidget: FC<AddToFavoritesWidgetProps> = ({ info }) => {\n  const { Key } = info;\n  const dispatch = useAppDispatch();\n  const favorites = useAppSelector((state) => state.weather.favorites);\n  const isFavorited = favorites.includes(Key);\n\n  const onAddToFavoritesClick = () => {\n    dispatch(isFavorited ? removeFavorite(Key) : addFavorite(Key));\n  };\n\n  return (\n    <Box\n      color=\"primary.main\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-around\"\n    >\n      <ColorButton onClick={onAddToFavoritesClick}>\n        {isFavorited ? <HeartFill size={50} /> : <Heart size={50} />}\n      </ColorButton>\n    </Box>\n  );\n};\n\nexport default AddToFavoritesWidget;\n","import AccuWeatherAPI, {\n  FiveDayForecastResponse,\n} from '../../../../api/AccuWeatherAPI';\nimport { FC } from 'react';\nimport {\n  Card,\n  CardActionArea,\n  CardContent,\n  Grid,\n  Typography,\n} from '@material-ui/core';\nimport { useAppSelector } from '../../../../hooks/hooks';\n\ninterface FiveDayForecastWidgetProps {\n  forecast: FiveDayForecastResponse;\n}\n\nconst FiveDayForecastWidget: FC<FiveDayForecastWidgetProps> = ({\n  forecast,\n}) => {\n  const celsius = useAppSelector((state) => state.weather.celsius);\n  const getDayFromEpoch = (epochTime: number): string => {\n    const days = [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n    ];\n    return days[new Date(epochTime * 1000).getDay()];\n  };\n  const getTemperatureRange = (\n    min: { Value: number; Unit: 'F' | 'C' },\n    max: { Value: number; Unit: 'F' | 'C' }\n  ): string => {\n    const unit = min.Unit;\n    const apiUnit = unit === 'C';\n    if (apiUnit === celsius) return `${min.Value}°-${max.Value}° ${unit}`;\n    if (min.Unit === 'F')\n      return `${Math.round((min.Value - 30) / 2)}°-${Math.round(\n        (max.Value - 30) / 2\n      )}° C`;\n    return `${Math.round(min.Value * 2 + 30)}°-${Math.round(\n      max.Value * 2 + 30\n    )}° F`;\n  };\n\n  return (\n    <Grid direction=\"row\" justifyContent=\"center\" container>\n      {forecast.DailyForecasts.map((forecast, index) => {\n        const max = forecast.Temperature.Maximum;\n        const min = forecast.Temperature.Minimum;\n        return (\n          <Grid style={{ margin: '2em', minWidth: '20em' }} item key={index}>\n            <Card>\n              <CardActionArea>\n                <CardContent style={{ textAlign: 'center' }}>\n                  <Typography variant=\"h6\">\n                    {getDayFromEpoch(forecast.EpochDate)}\n                  </Typography>\n                  <div>\n                    <Typography>Day</Typography>\n                    <img\n                      src={AccuWeatherAPI.getImageUrl(forecast.Day.Icon)}\n                      alt=\"day-weather-icon\"\n                    />\n                  </div>\n                  <Typography>Range {getTemperatureRange(min, max)}</Typography>\n                  <div>\n                    <img\n                      src={AccuWeatherAPI.getImageUrl(forecast.Night.Icon)}\n                      alt=\"night-weather-icon\"\n                    />\n                    <Typography>Night</Typography>\n                  </div>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport default FiveDayForecastWidget;\n","import WeatherSummary from './WeatherSummary';\nimport AddToFavoritesWidget from './AddToFavoritesWidget';\nimport FiveDayForecastWidget from './FiveDayForecastWidget';\nimport { FC, memo } from 'react';\nimport {\n  useAppSelector,\n  useMediaQueryBreakpoint,\n} from '../../../../hooks/hooks';\nimport { Box, Typography } from '@material-ui/core';\n\nconst WeatherDisplay: FC = () => {\n  const current = useAppSelector((state) => state.weather.current);\n  const { conditions, info, fiveDayForecast } = current;\n  const mediumScreenBreakpoint = useMediaQueryBreakpoint('md');\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      {current && (\n        <>\n          <Box\n            display=\"flex\"\n            width={mediumScreenBreakpoint ? '80%' : '95%'}\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n          >\n            <WeatherSummary conditions={conditions} info={info} />\n            <AddToFavoritesWidget info={info} />\n          </Box>\n          <Box style={{ margin: '0 auto' }} color=\"primary.main\">\n            <Typography\n              variant=\"h2\"\n              color=\"textPrimary\"\n              style={{ fontSize: mediumScreenBreakpoint ? '4em' : '3em' }}\n            >\n              {current.conditions.WeatherText}\n            </Typography>\n          </Box>\n          <FiveDayForecastWidget forecast={fiveDayForecast} />\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default memo(WeatherDisplay);\n","import ResultsDisplay from './ResultsDisplay';\nimport WeatherDisplay from './WeatherDisplay/WeatherDisplay';\nimport { FC } from 'react';\nimport { useAppSelector } from '../../../hooks/hooks';\nimport { Box } from '@material-ui/core';\n\nconst MainDisplay: FC = () => {\n  const results = useAppSelector((state) => state.weather.searchResults);\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      width=\"100%\"\n      minHeight=\"75vh\"\n      bgcolor=\"background.default\"\n    >\n      {results.length ? <ResultsDisplay /> : <WeatherDisplay />}\n    </Box>\n  );\n};\n\nexport default MainDisplay;\n","import AccuWeatherAPI from '../api/AccuWeatherAPI';\nimport { FC } from 'react';\nimport { Box, Typography } from '@material-ui/core';\n\nconst ErrorDisplay: FC = () => {\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      flexDirection=\"column\"\n      width=\"100%\"\n      minHeight=\"75vh\"\n      bgcolor=\"background.default\"\n    >\n      <Typography variant=\"h3\">\n        Whoops seems like we have encountered an issue!\n      </Typography>\n      <Typography variant=\"h3\">Here's the last known error:</Typography>\n      <Typography variant=\"h3\" style={{ color: 'red' }}>\n        {AccuWeatherAPI.getLatestErrorMessage()}\n      </Typography>\n    </Box>\n  );\n};\n\nexport default ErrorDisplay;\n","import Search from '../components/Home/Search';\nimport MainDisplay from '../components/Home/MainDisplay/MainDisplay';\nimport ErrorDisplay from '../components/ErrorDisplay';\nimport AccuWeatherAPI from '../api/AccuWeatherAPI';\nimport useAsyncEffect from 'use-async-effect';\nimport { FC, useState } from 'react';\nimport {\n  changeCurrent,\n  getCurrentPositionKey,\n} from '../store/reducers/weatherReducer';\nimport { useAppDispatch, useAppSelector } from '../hooks/hooks';\n\nconst Home: FC = () => {\n  const dispatch = useAppDispatch();\n  const current = useAppSelector((state) => state.weather.current);\n  const [mount, setMount] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n  useAsyncEffect(async () => {\n    if (current) {\n      setMount(true);\n      return;\n    }\n    const key = await getCurrentPositionKey();\n    AccuWeatherAPI.getCombinedDataCallback(\n      key,\n      ([conditions, info, fiveDayForecast]) => {\n        dispatch(changeCurrent({ info, conditions, fiveDayForecast }));\n        setMount(true);\n      },\n      () => setError(true)\n    );\n  }, []);\n\n  return (\n    <>\n      <Search />\n      {mount && <MainDisplay />}\n      {error && <ErrorDisplay />}\n    </>\n  );\n};\n\nexport default Home;\n","import AccuWeatherAPI, { CombinedData } from '../../api/AccuWeatherAPI';\nimport routes from '../../routes/routes';\nimport { FC } from 'react';\nimport { changeCurrent } from '../../store/reducers/weatherReducer';\nimport {\n  Card,\n  Box,\n  CardActionArea,\n  CardContent,\n  Grid,\n  Typography,\n} from '@material-ui/core';\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\nimport { useHistory } from 'react-router-dom';\n\ninterface FavoritesGridProps {\n  combinedDataArray: CombinedData[];\n}\n\nconst FavoritesGrid: FC<FavoritesGridProps> = ({ combinedDataArray }) => {\n  const celsius = useAppSelector((state) => state.weather.celsius);\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n\n  const onCardClick = (combinedData: CombinedData) => {\n    const [conditions, info, fiveDayForecast] = combinedData;\n    dispatch(changeCurrent({ conditions, info, fiveDayForecast }));\n    history.push(routes.home.to);\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      width=\"100%\"\n      minHeight=\"72vh\"\n      bgcolor=\"background.default\"\n    >\n      <Grid\n        style={{ width: '90%' }}\n        direction=\"row\"\n        justifyContent=\"center\"\n        container\n      >\n        {combinedDataArray.map((combinedData, index) => {\n          const [conditions, info] = combinedData;\n          const temperature = celsius\n            ? conditions.Temperature.Metric.Value\n            : conditions.Temperature.Imperial.Value;\n          const unit = celsius ? 'C' : 'F';\n          return (\n            <Grid style={{ margin: '2em', minWidth: '20em' }} item key={index}>\n              <Card>\n                <CardActionArea onClick={() => onCardClick(combinedData)}>\n                  <CardContent style={{ textAlign: 'center' }}>\n                    <Typography>{info.LocalizedName}</Typography>\n                    <Typography>\n                      {temperature}° {unit}\n                    </Typography>\n                    <div>\n                      <img\n                        src={AccuWeatherAPI.getImageUrl(conditions.WeatherIcon)}\n                        alt={`favorites-weather-icon-${index}`}\n                      />\n                    </div>\n                    <Typography>{conditions.WeatherText}</Typography>\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default FavoritesGrid;\n","import Home from '../pages/Home';\nimport Favorites from '../pages/Favorites';\n\nconst routes = {\n  home: {\n    name: 'Home',\n    to: '/',\n    component: Home,\n  },\n  favorites: {\n    name: 'Favorites',\n    to: '/favorites',\n    component: Favorites,\n  },\n};\n\nexport default routes;\n","import useAsyncEffect from 'use-async-effect';\nimport AccuWeatherAPI, { CombinedData } from '../api/AccuWeatherAPI';\nimport FavoritesGrid from '../components/Favorites/FavoritesGrid';\nimport { FC, useState } from 'react';\nimport { useAppSelector, useMediaQueryBreakpoint } from '../hooks/hooks';\nimport { Typography } from '@material-ui/core';\n\nconst Favorites: FC = () => {\n  const favorites = useAppSelector((state) => state.weather.favorites);\n  const [combinedData, setCombinedData] = useState<CombinedData[]>([]);\n  const [mount, setMount] = useState<boolean>(false);\n  const mediumScreenBreakpoint = useMediaQueryBreakpoint('md');\n\n  useAsyncEffect(async () => {\n    const combinedDataArray = await Promise.all(\n      favorites.map(\n        async (key: string) => await AccuWeatherAPI.getCombinedData(key)\n      )\n    );\n    setCombinedData(combinedDataArray);\n    setMount(true);\n    return () => setMount(false);\n  }, []);\n\n  return (\n    <>\n      <Typography\n        variant=\"h2\"\n        style={{\n          margin: '1em',\n          fontSize: mediumScreenBreakpoint ? '4em' : '3em',\n        }}\n        color=\"textPrimary\"\n      >\n        Your Favorite Locations\n      </Typography>\n      {mount && <FavoritesGrid combinedDataArray={combinedData} />}\n    </>\n  );\n};\n\nexport default Favorites;\n","import Switches from './ThemeSwitch';\nimport routes from '../routes/routes';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useMediaQueryBreakpoint } from '../hooks/hooks';\nimport { FC, memo, useState } from 'react';\nimport {\n  Box,\n  Link,\n  Button,\n  SwipeableDrawer,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n} from '@material-ui/core';\nimport { List as ListIcon } from 'react-bootstrap-icons';\n\nconst Links: FC = () => {\n  const mediumScreenBreakpoint = useMediaQueryBreakpoint('md');\n  const [drawerState, setDrawerState] = useState<boolean>(false);\n  const toggleDrawer = (val: boolean) => () => setDrawerState(val);\n\n  return mediumScreenBreakpoint ? (\n    <Box\n      display=\"flex\"\n      alignItems=\"center\"\n      width=\"30vw\"\n      justifyContent=\"flex-end\"\n      color=\"primary.main\"\n    >\n      {Object.values(routes).map((route, index) => (\n        <Link\n          key={index}\n          style={{ margin: '1em', minWidth: '4em' }}\n          color=\"textPrimary\"\n          component={RouterLink}\n          to={route.to}\n        >\n          {route.name}\n        </Link>\n      ))}\n      <Switches />\n    </Box>\n  ) : (\n    <>\n      <Button onClick={toggleDrawer(true)}>\n        <ListIcon size={40} />\n      </Button>\n      <SwipeableDrawer\n        anchor=\"right\"\n        onClose={toggleDrawer(false)}\n        onOpen={toggleDrawer(true)}\n        open={drawerState}\n      >\n        <div onClick={toggleDrawer(false)} onKeyDown={toggleDrawer(false)}>\n          {Object.values(routes).map((route, index) => (\n            <List key={index}>\n              <ListItem button component={RouterLink} to={route.to}>\n                <ListItemText primary={route.name} />\n              </ListItem>\n            </List>\n          ))}\n          <Divider />\n          <Switches listItems />\n        </div>\n      </SwipeableDrawer>\n    </>\n  );\n};\n\nexport default memo(Links);\n","import Links from '../Links';\nimport routes from '../../routes/routes';\nimport { Box, Button, Typography } from '@material-ui/core';\nimport { FC, memo } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useMediaQueryBreakpoint } from '../../hooks/hooks';\n\nconst Navbar: FC = () => {\n  const mediumScreenBreakpoint = useMediaQueryBreakpoint('md');\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      bgcolor=\"primary.main\"\n    >\n      <Button\n        style={{ marginLeft: mediumScreenBreakpoint ? '2em' : '0.5em' }}\n        component={RouterLink}\n        to={routes.home.to}\n      >\n        <Typography\n          variant=\"h5\"\n          style={{\n            fontStyle: 'italic',\n            fontSize: mediumScreenBreakpoint ? '1.5em' : '1em',\n          }}\n        >\n          Weather App\n        </Typography>\n      </Button>\n      <Links />\n    </Box>\n  );\n};\n\nexport default memo(Navbar);\n","import routes from '../routes/routes';\nimport { FC } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nconst Routes: FC = () => {\n  return (\n    <Switch>\n      {Object.values(routes).map((route, index) => (\n        <Route key={index} path={route.to} exact component={route.component} />\n      ))}\n    </Switch>\n  );\n};\n\nexport default Routes;\n","import Routes from '../pages/Routes';\nimport { FC } from 'react';\nimport { Box } from '@material-ui/core';\n\nconst Content: FC = () => {\n  return (\n    <Box display=\"flex\" alignItems=\"center\" flexDirection=\"column\">\n      <Routes />\n    </Box>\n  );\n};\n\nexport default Content;\n","import Navbar from '../components/Navbar/Navbar';\nimport Content from '../components/Content';\nimport { FC } from 'react';\n\nconst Main: FC = () => {\n  return (\n    <>\n      <Navbar />\n      <Content />\n    </>\n  );\n};\n\nexport default Main;\n","import { FC } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst Router: FC = ({ children }) => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>{children}</BrowserRouter>\n  );\n};\n\nexport default Router;\n","import ReactDOM from 'react-dom';\nimport StoreProvider from './store/StoreProvider';\nimport ThemeProvider from './style/ThemeProvider';\nimport Main from './pages/Main';\nimport Router from './routes/Router';\nimport { FC } from 'react';\n\nconst App: FC = () => {\n  return (\n    <StoreProvider>\n      <ThemeProvider>\n        <Router>\n          <Main />\n        </Router>\n      </ThemeProvider>\n    </StoreProvider>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}